/*
 * generated by Xtext 2.23.0
 */
package br.ufscar.dc.compiladores.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PlayLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Game");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWINDOW_SIZEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinhaINTTerminalRuleCall_1_0 = (RuleCall)cLinhaAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColunaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColunaINTTerminalRuleCall_3_0 = (RuleCall)cColunaAssignment_3.eContents().get(0);
		private final Assignment cDeclaracoes_globaisAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclaracoes_globaisDeclaracaoParserRuleCall_4_0 = (RuleCall)cDeclaracoes_globaisAssignment_4.eContents().get(0);
		private final Assignment cEventoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEventoEventoGlobalParserRuleCall_5_0 = (RuleCall)cEventoAssignment_5.eContents().get(0);
		private final Assignment cCenasAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCenasCenaParserRuleCall_6_0 = (RuleCall)cCenasAssignment_6.eContents().get(0);
		
		//Game:
		//	"WINDOW_SIZE:" linha=INT "," coluna=INT declaracoes_globais+=Declaracao* evento=EventoGlobal? cenas+=Cena*;
		@Override public ParserRule getRule() { return rule; }
		
		//"WINDOW_SIZE:" linha=INT "," coluna=INT declaracoes_globais+=Declaracao* evento=EventoGlobal? cenas+=Cena*
		public Group getGroup() { return cGroup; }
		
		//"WINDOW_SIZE:"
		public Keyword getWINDOW_SIZEKeyword_0() { return cWINDOW_SIZEKeyword_0; }
		
		//linha=INT
		public Assignment getLinhaAssignment_1() { return cLinhaAssignment_1; }
		
		//INT
		public RuleCall getLinhaINTTerminalRuleCall_1_0() { return cLinhaINTTerminalRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//coluna=INT
		public Assignment getColunaAssignment_3() { return cColunaAssignment_3; }
		
		//INT
		public RuleCall getColunaINTTerminalRuleCall_3_0() { return cColunaINTTerminalRuleCall_3_0; }
		
		//declaracoes_globais+=Declaracao*
		public Assignment getDeclaracoes_globaisAssignment_4() { return cDeclaracoes_globaisAssignment_4; }
		
		//Declaracao
		public RuleCall getDeclaracoes_globaisDeclaracaoParserRuleCall_4_0() { return cDeclaracoes_globaisDeclaracaoParserRuleCall_4_0; }
		
		//evento=EventoGlobal?
		public Assignment getEventoAssignment_5() { return cEventoAssignment_5; }
		
		//EventoGlobal
		public RuleCall getEventoEventoGlobalParserRuleCall_5_0() { return cEventoEventoGlobalParserRuleCall_5_0; }
		
		//cenas+=Cena*
		public Assignment getCenasAssignment_6() { return cCenasAssignment_6; }
		
		//Cena
		public RuleCall getCenasCenaParserRuleCall_6_0() { return cCenasCenaParserRuleCall_6_0; }
	}
	public class EventoGlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.EventoGlobal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComandosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComandosComandoParserRuleCall_1_0 = (RuleCall)cComandosAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EventoGlobal:
		//	"globalEvent{" comandos+=Comando+ "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"globalEvent{" comandos+=Comando+ "}"
		public Group getGroup() { return cGroup; }
		
		//"globalEvent{"
		public Keyword getGlobalEventKeyword_0() { return cGlobalEventKeyword_0; }
		
		//comandos+=Comando+
		public Assignment getComandosAssignment_1() { return cComandosAssignment_1; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_1_0() { return cComandosComandoParserRuleCall_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class DeclaracaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Declaracao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cStringAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cStringAssignment_3_0.eContents().get(0);
		private final Assignment cBoolAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cBoolBOOLParserRuleCall_3_1_0 = (RuleCall)cBoolAssignment_3_1.eContents().get(0);
		private final Assignment cIntAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cIntINTTerminalRuleCall_3_2_0 = (RuleCall)cIntAssignment_3_2.eContents().get(0);
		private final Assignment cZeroAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final Keyword cZeroZEROKeyword_3_3_0 = (Keyword)cZeroAssignment_3_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///*Foi necessário usar a keyword ZERO na declaração de ints de valor 0
		// *pois o validador de tipos verifica se o valor foi atribuido a string,int ou bool,
		// * mas um int não inicializado tem valor zero, então é necessário usar a palavra chave
		// * para não dar erro. 
		// * Admito que é um tapa-buraco, mas modificar a regra INT de Terminals para retornar string
		// * causa problemas mais graves, e não podemos usar ?= pois o gerador precisa desses valores
		//*/ Declaracao:
		//	tipo=Tipo name=ID "=" (string=STRING | bool=BOOL | int=INT | zero="ZERO") ";";
		@Override public ParserRule getRule() { return rule; }
		
		//tipo=Tipo name=ID "=" (string=STRING | bool=BOOL | int=INT | zero="ZERO") ";"
		public Group getGroup() { return cGroup; }
		
		//tipo=Tipo
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }
		
		//Tipo
		public RuleCall getTipoTipoParserRuleCall_0_0() { return cTipoTipoParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//(string=STRING | bool=BOOL | int=INT | zero="ZERO")
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//string=STRING
		public Assignment getStringAssignment_3_0() { return cStringAssignment_3_0; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_3_0_0() { return cStringSTRINGTerminalRuleCall_3_0_0; }
		
		//bool=BOOL
		public Assignment getBoolAssignment_3_1() { return cBoolAssignment_3_1; }
		
		//BOOL
		public RuleCall getBoolBOOLParserRuleCall_3_1_0() { return cBoolBOOLParserRuleCall_3_1_0; }
		
		//int=INT
		public Assignment getIntAssignment_3_2() { return cIntAssignment_3_2; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_3_2_0() { return cIntINTTerminalRuleCall_3_2_0; }
		
		//zero="ZERO"
		public Assignment getZeroAssignment_3_3() { return cZeroAssignment_3_3; }
		
		//"ZERO"
		public Keyword getZeroZEROKeyword_3_3_0() { return cZeroZEROKeyword_3_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class CenaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Cena");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSceneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextosTextoParserRuleCall_3_0 = (RuleCall)cTextosAssignment_3.eContents().get(0);
		private final Assignment cImagemAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImagemImagemParserRuleCall_4_0 = (RuleCall)cImagemAssignment_4.eContents().get(0);
		private final Assignment cSoundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSoundPlaySoundParserRuleCall_5_0 = (RuleCall)cSoundAssignment_5.eContents().get(0);
		private final Assignment cEscolhasAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEscolhasEscolhasParserRuleCall_6_0 = (RuleCall)cEscolhasAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Cena:
		//	"Scene" name=ID "(" textos+=Texto+ imagem=Imagem? sound=PlaySound? escolhas+=Escolhas+ ");";
		@Override public ParserRule getRule() { return rule; }
		
		//"Scene" name=ID "(" textos+=Texto+ imagem=Imagem? sound=PlaySound? escolhas+=Escolhas+ ");"
		public Group getGroup() { return cGroup; }
		
		//"Scene"
		public Keyword getSceneKeyword_0() { return cSceneKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//textos+=Texto+
		public Assignment getTextosAssignment_3() { return cTextosAssignment_3; }
		
		//Texto
		public RuleCall getTextosTextoParserRuleCall_3_0() { return cTextosTextoParserRuleCall_3_0; }
		
		//imagem=Imagem?
		public Assignment getImagemAssignment_4() { return cImagemAssignment_4; }
		
		//Imagem
		public RuleCall getImagemImagemParserRuleCall_4_0() { return cImagemImagemParserRuleCall_4_0; }
		
		//sound=PlaySound?
		public Assignment getSoundAssignment_5() { return cSoundAssignment_5; }
		
		//PlaySound
		public RuleCall getSoundPlaySoundParserRuleCall_5_0() { return cSoundPlaySoundParserRuleCall_5_0; }
		
		//escolhas+=Escolhas+
		public Assignment getEscolhasAssignment_6() { return cEscolhasAssignment_6; }
		
		//Escolhas
		public RuleCall getEscolhasEscolhasParserRuleCall_6_0() { return cEscolhasEscolhasParserRuleCall_6_0; }
		
		//");"
		public Keyword getRightParenthesisSemicolonKeyword_7() { return cRightParenthesisSemicolonKeyword_7; }
	}
	public class ImagemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Imagem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaminhoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaminhoSTRINGTerminalRuleCall_1_0 = (RuleCall)cCaminhoAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLinhaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLinhaINTTerminalRuleCall_2_1_0 = (RuleCall)cLinhaAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cColunaAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cColunaINTTerminalRuleCall_2_3_0 = (RuleCall)cColunaAssignment_2_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Imagem inclue o caminho e opcionalmente as dimensões para os quais deve ser redimensionada
		//Imagem:
		//	"<" caminho=STRING ("," linha=INT ',' coluna=INT)? ">";
		@Override public ParserRule getRule() { return rule; }
		
		//"<" caminho=STRING ("," linha=INT ',' coluna=INT)? ">"
		public Group getGroup() { return cGroup; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//caminho=STRING
		public Assignment getCaminhoAssignment_1() { return cCaminhoAssignment_1; }
		
		//STRING
		public RuleCall getCaminhoSTRINGTerminalRuleCall_1_0() { return cCaminhoSTRINGTerminalRuleCall_1_0; }
		
		//("," linha=INT ',' coluna=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//linha=INT
		public Assignment getLinhaAssignment_2_1() { return cLinhaAssignment_2_1; }
		
		//INT
		public RuleCall getLinhaINTTerminalRuleCall_2_1_0() { return cLinhaINTTerminalRuleCall_2_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//coluna=INT
		public Assignment getColunaAssignment_2_3() { return cColunaAssignment_2_3; }
		
		//INT
		public RuleCall getColunaINTTerminalRuleCall_2_3_0() { return cColunaINTTerminalRuleCall_2_3_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class TextoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Texto");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVarDeclaracaoCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarDeclaracaoIDTerminalRuleCall_1_0_1 = (RuleCall)cVarDeclaracaoCrossReference_1_0.eContents().get(1);
		
		////Texto de uma cena ou escolha pode conter variáveis e strings, possibilitando a concatenação
		//Texto:
		//	text=STRING | var=[Declaracao];
		@Override public ParserRule getRule() { return rule; }
		
		//text=STRING | var=[Declaracao]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//text=STRING
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_0() { return cTextSTRINGTerminalRuleCall_0_0; }
		
		//var=[Declaracao]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//[Declaracao]
		public CrossReference getVarDeclaracaoCrossReference_1_0() { return cVarDeclaracaoCrossReference_1_0; }
		
		//ID
		public RuleCall getVarDeclaracaoIDTerminalRuleCall_1_0_1() { return cVarDeclaracaoIDTerminalRuleCall_1_0_1; }
	}
	public class EscolhasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Escolhas");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSingleChoiceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSingleChoiceEscolhaParserRuleCall_0_0 = (RuleCall)cSingleChoiceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cHasIfAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cHasIfIFKeyword_1_0_0 = (Keyword)cHasIfAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressaoIfAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressaoIfExpressaoParserRuleCall_1_2_0 = (RuleCall)cExpressaoIfAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cEscolhasIFAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cEscolhasIFEscolhasParserRuleCall_1_5_0 = (RuleCall)cEscolhasIFAssignment_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_1_7 = (Group)cGroup_1.eContents().get(7);
		private final Assignment cHasElseAssignment_1_7_0 = (Assignment)cGroup_1_7.eContents().get(0);
		private final Keyword cHasElseELSEKeyword_1_7_0_0 = (Keyword)cHasElseAssignment_1_7_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_7_1 = (Keyword)cGroup_1_7.eContents().get(1);
		private final Assignment cEscolhasELSEAssignment_1_7_2 = (Assignment)cGroup_1_7.eContents().get(2);
		private final RuleCall cEscolhasELSEEscolhasParserRuleCall_1_7_2_0 = (RuleCall)cEscolhasELSEAssignment_1_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7_3 = (Keyword)cGroup_1_7.eContents().get(3);
		
		////As palavras-chave IF e ELSE definem quando um conjunto de escolhas será visível
		//Escolhas:
		//	singleChoice=Escolha | hasIf?="IF" "(" expressaoIf=Expressao ")" "{" escolhasIF+=Escolhas+ "}" (hasElse?="ELSE" "{"
		//	escolhasELSE+=Escolhas+ "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//singleChoice=Escolha | hasIf?="IF" "(" expressaoIf=Expressao ")" "{" escolhasIF+=Escolhas+ "}" (hasElse?="ELSE" "{"
		//escolhasELSE+=Escolhas+ "}")?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//singleChoice=Escolha
		public Assignment getSingleChoiceAssignment_0() { return cSingleChoiceAssignment_0; }
		
		//Escolha
		public RuleCall getSingleChoiceEscolhaParserRuleCall_0_0() { return cSingleChoiceEscolhaParserRuleCall_0_0; }
		
		//hasIf?="IF" "(" expressaoIf=Expressao ")" "{" escolhasIF+=Escolhas+ "}" (hasElse?="ELSE" "{" escolhasELSE+=Escolhas+
		//"}")?
		public Group getGroup_1() { return cGroup_1; }
		
		//hasIf?="IF"
		public Assignment getHasIfAssignment_1_0() { return cHasIfAssignment_1_0; }
		
		//"IF"
		public Keyword getHasIfIFKeyword_1_0_0() { return cHasIfIFKeyword_1_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//expressaoIf=Expressao
		public Assignment getExpressaoIfAssignment_1_2() { return cExpressaoIfAssignment_1_2; }
		
		//Expressao
		public RuleCall getExpressaoIfExpressaoParserRuleCall_1_2_0() { return cExpressaoIfExpressaoParserRuleCall_1_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }
		
		//escolhasIF+=Escolhas+
		public Assignment getEscolhasIFAssignment_1_5() { return cEscolhasIFAssignment_1_5; }
		
		//Escolhas
		public RuleCall getEscolhasIFEscolhasParserRuleCall_1_5_0() { return cEscolhasIFEscolhasParserRuleCall_1_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
		
		//(hasElse?="ELSE" "{" escolhasELSE+=Escolhas+ "}")?
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//hasElse?="ELSE"
		public Assignment getHasElseAssignment_1_7_0() { return cHasElseAssignment_1_7_0; }
		
		//"ELSE"
		public Keyword getHasElseELSEKeyword_1_7_0_0() { return cHasElseELSEKeyword_1_7_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_7_1() { return cLeftCurlyBracketKeyword_1_7_1; }
		
		//escolhasELSE+=Escolhas+
		public Assignment getEscolhasELSEAssignment_1_7_2() { return cEscolhasELSEAssignment_1_7_2; }
		
		//Escolhas
		public RuleCall getEscolhasELSEEscolhasParserRuleCall_1_7_2_0() { return cEscolhasELSEEscolhasParserRuleCall_1_7_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_7_3() { return cRightCurlyBracketKeyword_1_7_3; }
	}
	public class EscolhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Escolha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextosTextoParserRuleCall_1_0 = (RuleCall)cTextosAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cComandoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComandoComandoParserRuleCall_2_1_0 = (RuleCall)cComandoAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cIfAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cIfIfParserRuleCall_4_0_0 = (RuleCall)cIfAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cIdAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cIdCenaCrossReference_4_1_1_0 = (CrossReference)cIdAssignment_4_1_1.eContents().get(0);
		private final RuleCall cIdCenaIDTerminalRuleCall_4_1_1_0_1 = (RuleCall)cIdCenaCrossReference_4_1_1_0.eContents().get(1);
		
		////Os comandos entre parênteses são executados quando o jogador opta pela escolha
		//Escolha:
		//	"[[" textos+=Texto+ ("(" comando+=Comando+ ")")? "]]" (if=If | "->" id=[Cena]);
		@Override public ParserRule getRule() { return rule; }
		
		//"[[" textos+=Texto+ ("(" comando+=Comando+ ")")? "]]" (if=If | "->" id=[Cena])
		public Group getGroup() { return cGroup; }
		
		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }
		
		//textos+=Texto+
		public Assignment getTextosAssignment_1() { return cTextosAssignment_1; }
		
		//Texto
		public RuleCall getTextosTextoParserRuleCall_1_0() { return cTextosTextoParserRuleCall_1_0; }
		
		//("(" comando+=Comando+ ")")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//comando+=Comando+
		public Assignment getComandoAssignment_2_1() { return cComandoAssignment_2_1; }
		
		//Comando
		public RuleCall getComandoComandoParserRuleCall_2_1_0() { return cComandoComandoParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_3() { return cRightSquareBracketRightSquareBracketKeyword_3; }
		
		//(if=If | "->" id=[Cena])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//if=If
		public Assignment getIfAssignment_4_0() { return cIfAssignment_4_0; }
		
		//If
		public RuleCall getIfIfParserRuleCall_4_0_0() { return cIfIfParserRuleCall_4_0_0; }
		
		//"->" id=[Cena]
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_1_0() { return cHyphenMinusGreaterThanSignKeyword_4_1_0; }
		
		//id=[Cena]
		public Assignment getIdAssignment_4_1_1() { return cIdAssignment_4_1_1; }
		
		//[Cena]
		public CrossReference getIdCenaCrossReference_4_1_1_0() { return cIdCenaCrossReference_4_1_1_0; }
		
		//ID
		public RuleCall getIdCenaIDTerminalRuleCall_4_1_1_0_1() { return cIdCenaIDTerminalRuleCall_4_1_1_0_1; }
	}
	public class ComandoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Comando");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtribuicaoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRandomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Comando:
		//	Atribuicao | Random;
		@Override public ParserRule getRule() { return rule; }
		
		//Atribuicao | Random
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Atribuicao
		public RuleCall getAtribuicaoParserRuleCall_0() { return cAtribuicaoParserRuleCall_0; }
		
		//Random
		public RuleCall getRandomParserRuleCall_1() { return cRandomParserRuleCall_1; }
	}
	public class RandomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Random");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRandomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cIdDeclaracaoCrossReference_2_0 = (CrossReference)cIdAssignment_2.eContents().get(0);
		private final RuleCall cIdDeclaracaoIDTerminalRuleCall_2_0_1 = (RuleCall)cIdDeclaracaoCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cPossibilidadesIntAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cPossibilidadesIntINTTerminalRuleCall_4_0_0_0 = (RuleCall)cPossibilidadesIntAssignment_4_0_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_4_0_1_0 = (Keyword)cGroup_4_0_1.eContents().get(0);
		private final Assignment cPossibilidadesIntAssignment_4_0_1_1 = (Assignment)cGroup_4_0_1.eContents().get(1);
		private final RuleCall cPossibilidadesIntINTTerminalRuleCall_4_0_1_1_0 = (RuleCall)cPossibilidadesIntAssignment_4_0_1_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cPossibilidadesStringAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cPossibilidadesStringSTRINGTerminalRuleCall_4_1_0_0 = (RuleCall)cPossibilidadesStringAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cPossibilidadesStringAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cPossibilidadesStringSTRINGTerminalRuleCall_4_1_1_1_0 = (RuleCall)cPossibilidadesStringAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Assignment cPossibilidadesBoolAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cPossibilidadesBoolBOOLParserRuleCall_4_2_0_0 = (RuleCall)cPossibilidadesBoolAssignment_4_2_0.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Keyword cCommaKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Assignment cPossibilidadesBoolAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cPossibilidadesBoolBOOLParserRuleCall_4_2_1_1_0 = (RuleCall)cPossibilidadesBoolAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Random:
		//	"Random" "(" id=[Declaracao] ",[" (possibilidadesInt+=INT ("," possibilidadesInt+=INT)* | possibilidadesString+=STRING
		//	("," possibilidadesString+=STRING)* | possibilidadesBool+=BOOL ("," possibilidadesBool+=BOOL)*) "]" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Random" "(" id=[Declaracao] ",[" (possibilidadesInt+=INT ("," possibilidadesInt+=INT)* | possibilidadesString+=STRING
		//("," possibilidadesString+=STRING)* | possibilidadesBool+=BOOL ("," possibilidadesBool+=BOOL)*) "]" ")"
		public Group getGroup() { return cGroup; }
		
		//"Random"
		public Keyword getRandomKeyword_0() { return cRandomKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//id=[Declaracao]
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//[Declaracao]
		public CrossReference getIdDeclaracaoCrossReference_2_0() { return cIdDeclaracaoCrossReference_2_0; }
		
		//ID
		public RuleCall getIdDeclaracaoIDTerminalRuleCall_2_0_1() { return cIdDeclaracaoIDTerminalRuleCall_2_0_1; }
		
		//",["
		public Keyword getCommaLeftSquareBracketKeyword_3() { return cCommaLeftSquareBracketKeyword_3; }
		
		//(possibilidadesInt+=INT ("," possibilidadesInt+=INT)* | possibilidadesString+=STRING ("," possibilidadesString+=STRING)*
		//| possibilidadesBool+=BOOL ("," possibilidadesBool+=BOOL)*)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//possibilidadesInt+=INT ("," possibilidadesInt+=INT)*
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//possibilidadesInt+=INT
		public Assignment getPossibilidadesIntAssignment_4_0_0() { return cPossibilidadesIntAssignment_4_0_0; }
		
		//INT
		public RuleCall getPossibilidadesIntINTTerminalRuleCall_4_0_0_0() { return cPossibilidadesIntINTTerminalRuleCall_4_0_0_0; }
		
		//("," possibilidadesInt+=INT)*
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }
		
		//","
		public Keyword getCommaKeyword_4_0_1_0() { return cCommaKeyword_4_0_1_0; }
		
		//possibilidadesInt+=INT
		public Assignment getPossibilidadesIntAssignment_4_0_1_1() { return cPossibilidadesIntAssignment_4_0_1_1; }
		
		//INT
		public RuleCall getPossibilidadesIntINTTerminalRuleCall_4_0_1_1_0() { return cPossibilidadesIntINTTerminalRuleCall_4_0_1_1_0; }
		
		//possibilidadesString+=STRING ("," possibilidadesString+=STRING)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//possibilidadesString+=STRING
		public Assignment getPossibilidadesStringAssignment_4_1_0() { return cPossibilidadesStringAssignment_4_1_0; }
		
		//STRING
		public RuleCall getPossibilidadesStringSTRINGTerminalRuleCall_4_1_0_0() { return cPossibilidadesStringSTRINGTerminalRuleCall_4_1_0_0; }
		
		//("," possibilidadesString+=STRING)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//possibilidadesString+=STRING
		public Assignment getPossibilidadesStringAssignment_4_1_1_1() { return cPossibilidadesStringAssignment_4_1_1_1; }
		
		//STRING
		public RuleCall getPossibilidadesStringSTRINGTerminalRuleCall_4_1_1_1_0() { return cPossibilidadesStringSTRINGTerminalRuleCall_4_1_1_1_0; }
		
		//possibilidadesBool+=BOOL ("," possibilidadesBool+=BOOL)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//possibilidadesBool+=BOOL
		public Assignment getPossibilidadesBoolAssignment_4_2_0() { return cPossibilidadesBoolAssignment_4_2_0; }
		
		//BOOL
		public RuleCall getPossibilidadesBoolBOOLParserRuleCall_4_2_0_0() { return cPossibilidadesBoolBOOLParserRuleCall_4_2_0_0; }
		
		//("," possibilidadesBool+=BOOL)*
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }
		
		//","
		public Keyword getCommaKeyword_4_2_1_0() { return cCommaKeyword_4_2_1_0; }
		
		//possibilidadesBool+=BOOL
		public Assignment getPossibilidadesBoolAssignment_4_2_1_1() { return cPossibilidadesBoolAssignment_4_2_1_1; }
		
		//BOOL
		public RuleCall getPossibilidadesBoolBOOLParserRuleCall_4_2_1_1_0() { return cPossibilidadesBoolBOOLParserRuleCall_4_2_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class PlaySoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.PlaySound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaySoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFile_pathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFile_pathSTRINGTerminalRuleCall_2_0 = (RuleCall)cFile_pathAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PlaySound:
		//	"PlaySound" "(" file_path=STRING ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"PlaySound" "(" file_path=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//"PlaySound"
		public Keyword getPlaySoundKeyword_0() { return cPlaySoundKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//file_path=STRING
		public Assignment getFile_pathAssignment_2() { return cFile_pathAssignment_2; }
		
		//STRING
		public RuleCall getFile_pathSTRINGTerminalRuleCall_2_0() { return cFile_pathSTRINGTerminalRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoIfExpressaoParserRuleCall_2_0 = (RuleCall)cExpressaoIfAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdIfAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cIdIfCenaCrossReference_5_0 = (CrossReference)cIdIfAssignment_5.eContents().get(0);
		private final RuleCall cIdIfCenaIDTerminalRuleCall_5_0_1 = (RuleCall)cIdIfCenaCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cElifAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cElifIfParserRuleCall_6_1_0_0 = (RuleCall)cElifAssignment_6_1_0.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cAlternatives_6_1.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6_1_1_0 = (Keyword)cGroup_6_1_1.eContents().get(0);
		private final Assignment cIdElseAssignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final CrossReference cIdElseCenaCrossReference_6_1_1_1_0 = (CrossReference)cIdElseAssignment_6_1_1_1.eContents().get(0);
		private final RuleCall cIdElseCenaIDTerminalRuleCall_6_1_1_1_0_1 = (RuleCall)cIdElseCenaCrossReference_6_1_1_1_0.eContents().get(1);
		
		////As palavras-chave if e else definem para qual estado uma dada escolha irá levar
		//If:
		//	"if" "(" expressaoIf=Expressao ")" "->" idIf=[Cena] ("else" (elif=If | "->" idElse=[Cena]));
		@Override public ParserRule getRule() { return rule; }
		
		//"if" "(" expressaoIf=Expressao ")" "->" idIf=[Cena] ("else" (elif=If | "->" idElse=[Cena]))
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expressaoIf=Expressao
		public Assignment getExpressaoIfAssignment_2() { return cExpressaoIfAssignment_2; }
		
		//Expressao
		public RuleCall getExpressaoIfExpressaoParserRuleCall_2_0() { return cExpressaoIfExpressaoParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//idIf=[Cena]
		public Assignment getIdIfAssignment_5() { return cIdIfAssignment_5; }
		
		//[Cena]
		public CrossReference getIdIfCenaCrossReference_5_0() { return cIdIfCenaCrossReference_5_0; }
		
		//ID
		public RuleCall getIdIfCenaIDTerminalRuleCall_5_0_1() { return cIdIfCenaIDTerminalRuleCall_5_0_1; }
		
		//("else" (elif=If | "->" idElse=[Cena]))
		public Group getGroup_6() { return cGroup_6; }
		
		//"else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//(elif=If | "->" idElse=[Cena])
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//elif=If
		public Assignment getElifAssignment_6_1_0() { return cElifAssignment_6_1_0; }
		
		//If
		public RuleCall getElifIfParserRuleCall_6_1_0_0() { return cElifIfParserRuleCall_6_1_0_0; }
		
		//"->" idElse=[Cena]
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6_1_1_0() { return cHyphenMinusGreaterThanSignKeyword_6_1_1_0; }
		
		//idElse=[Cena]
		public Assignment getIdElseAssignment_6_1_1_1() { return cIdElseAssignment_6_1_1_1; }
		
		//[Cena]
		public CrossReference getIdElseCenaCrossReference_6_1_1_1_0() { return cIdElseCenaCrossReference_6_1_1_1_0; }
		
		//ID
		public RuleCall getIdElseCenaIDTerminalRuleCall_6_1_1_1_0_1() { return cIdElseCenaIDTerminalRuleCall_6_1_1_1_0_1; }
	}
	public class AtribuicaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Atribuicao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIdDeclaracaoCrossReference_0_0 = (CrossReference)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdDeclaracaoIDTerminalRuleCall_0_0_1 = (RuleCall)cIdDeclaracaoCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressaoAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressaoExpressaoParserRuleCall_2_0_0 = (RuleCall)cExpressaoAssignment_2_0.eContents().get(0);
		private final Assignment cStringAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cStringAssignment_2_1.eContents().get(0);
		
		//Atribuicao:
		//	id=[Declaracao] "=" (expressao=Expressao | string=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//id=[Declaracao] "=" (expressao=Expressao | string=STRING)
		public Group getGroup() { return cGroup; }
		
		//id=[Declaracao]
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//[Declaracao]
		public CrossReference getIdDeclaracaoCrossReference_0_0() { return cIdDeclaracaoCrossReference_0_0; }
		
		//ID
		public RuleCall getIdDeclaracaoIDTerminalRuleCall_0_0_1() { return cIdDeclaracaoIDTerminalRuleCall_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(expressao=Expressao | string=STRING)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//expressao=Expressao
		public Assignment getExpressaoAssignment_2_0() { return cExpressaoAssignment_2_0; }
		
		//Expressao
		public RuleCall getExpressaoExpressaoParserRuleCall_2_0_0() { return cExpressaoExpressaoParserRuleCall_2_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2_1() { return cStringAssignment_2_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_1_0() { return cStringSTRINGTerminalRuleCall_2_1_0; }
	}
	public class ExpressaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Expressao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermosAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermosTermoLogicoParserRuleCall_0_0 = (RuleCall)cTermosAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOuAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOuOUParserRuleCall_1_0_0 = (RuleCall)cOuAssignment_1_0.eContents().get(0);
		private final Assignment cTermosAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermosTermoLogicoParserRuleCall_1_1_0 = (RuleCall)cTermosAssignment_1_1.eContents().get(0);
		
		//Expressao:
		//	termos+=TermoLogico (ou+=OU termos+=TermoLogico)*;
		@Override public ParserRule getRule() { return rule; }
		
		//termos+=TermoLogico (ou+=OU termos+=TermoLogico)*
		public Group getGroup() { return cGroup; }
		
		//termos+=TermoLogico
		public Assignment getTermosAssignment_0() { return cTermosAssignment_0; }
		
		//TermoLogico
		public RuleCall getTermosTermoLogicoParserRuleCall_0_0() { return cTermosTermoLogicoParserRuleCall_0_0; }
		
		//(ou+=OU termos+=TermoLogico)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ou+=OU
		public Assignment getOuAssignment_1_0() { return cOuAssignment_1_0; }
		
		//OU
		public RuleCall getOuOUParserRuleCall_1_0_0() { return cOuOUParserRuleCall_1_0_0; }
		
		//termos+=TermoLogico
		public Assignment getTermosAssignment_1_1() { return cTermosAssignment_1_1; }
		
		//TermoLogico
		public RuleCall getTermosTermoLogicoParserRuleCall_1_1_0() { return cTermosTermoLogicoParserRuleCall_1_1_0; }
	}
	public class TermoLogicoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.TermoLogico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFatoresAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFatoresFatorLogicoParserRuleCall_0_0 = (RuleCall)cFatoresAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cEAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEEParserRuleCall_1_0_0 = (RuleCall)cEAssignment_1_0.eContents().get(0);
		private final Assignment cFatoresAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFatoresFatorLogicoParserRuleCall_1_1_0 = (RuleCall)cFatoresAssignment_1_1.eContents().get(0);
		
		//TermoLogico:
		//	fatores+=FatorLogico (e+=E fatores+=FatorLogico)*;
		@Override public ParserRule getRule() { return rule; }
		
		//fatores+=FatorLogico (e+=E fatores+=FatorLogico)*
		public Group getGroup() { return cGroup; }
		
		//fatores+=FatorLogico
		public Assignment getFatoresAssignment_0() { return cFatoresAssignment_0; }
		
		//FatorLogico
		public RuleCall getFatoresFatorLogicoParserRuleCall_0_0() { return cFatoresFatorLogicoParserRuleCall_0_0; }
		
		//(e+=E fatores+=FatorLogico)*
		public Group getGroup_1() { return cGroup_1; }
		
		//e+=E
		public Assignment getEAssignment_1_0() { return cEAssignment_1_0; }
		
		//E
		public RuleCall getEEParserRuleCall_1_0_0() { return cEEParserRuleCall_1_0_0; }
		
		//fatores+=FatorLogico
		public Assignment getFatoresAssignment_1_1() { return cFatoresAssignment_1_1; }
		
		//FatorLogico
		public RuleCall getFatoresFatorLogicoParserRuleCall_1_1_0() { return cFatoresFatorLogicoParserRuleCall_1_1_0; }
	}
	public class FatorLogicoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.FatorLogico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNaoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNaoNAOParserRuleCall_0_0 = (RuleCall)cNaoAssignment_0.eContents().get(0);
		private final Assignment cParcelaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParcelaParcela_logicaParserRuleCall_1_0 = (RuleCall)cParcelaAssignment_1.eContents().get(0);
		
		//FatorLogico:
		//	nao?=NAO? parcela=Parcela_logica;
		@Override public ParserRule getRule() { return rule; }
		
		//nao?=NAO? parcela=Parcela_logica
		public Group getGroup() { return cGroup; }
		
		//nao?=NAO?
		public Assignment getNaoAssignment_0() { return cNaoAssignment_0; }
		
		//NAO
		public RuleCall getNaoNAOParserRuleCall_0_0() { return cNaoNAOParserRuleCall_0_0; }
		
		//parcela=Parcela_logica
		public Assignment getParcelaAssignment_1() { return cParcelaAssignment_1; }
		
		//Parcela_logica
		public RuleCall getParcelaParcela_logicaParserRuleCall_1_0() { return cParcelaParcela_logicaParserRuleCall_1_0; }
	}
	public class Parcela_logicaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Parcela_logica");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPBOOLParserRuleCall_0_0 = (RuleCall)cPAssignment_0.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpExpressaoRelacionalParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//Parcela_logica:
		//	p=BOOL | exp=ExpressaoRelacional;
		@Override public ParserRule getRule() { return rule; }
		
		//p=BOOL | exp=ExpressaoRelacional
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//p=BOOL
		public Assignment getPAssignment_0() { return cPAssignment_0; }
		
		//BOOL
		public RuleCall getPBOOLParserRuleCall_0_0() { return cPBOOLParserRuleCall_0_0; }
		
		//exp=ExpressaoRelacional
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//ExpressaoRelacional
		public RuleCall getExpExpressaoRelacionalParserRuleCall_1_0() { return cExpExpressaoRelacionalParserRuleCall_1_0; }
	}
	public class ExpressaoRelacionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.ExpressaoRelacional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressoesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressoesExpressaoAritmeticaParserRuleCall_0_0 = (RuleCall)cExpressoesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpOPRELACIONALParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cExpressoesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressoesExpressaoAritmeticaParserRuleCall_1_1_0 = (RuleCall)cExpressoesAssignment_1_1.eContents().get(0);
		
		//ExpressaoRelacional:
		//	expressoes+=ExpressaoAritmetica (op+=OPRELACIONAL expressoes+=ExpressaoAritmetica)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expressoes+=ExpressaoAritmetica (op+=OPRELACIONAL expressoes+=ExpressaoAritmetica)*
		public Group getGroup() { return cGroup; }
		
		//expressoes+=ExpressaoAritmetica
		public Assignment getExpressoesAssignment_0() { return cExpressoesAssignment_0; }
		
		//ExpressaoAritmetica
		public RuleCall getExpressoesExpressaoAritmeticaParserRuleCall_0_0() { return cExpressoesExpressaoAritmeticaParserRuleCall_0_0; }
		
		//(op+=OPRELACIONAL expressoes+=ExpressaoAritmetica)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=OPRELACIONAL
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//OPRELACIONAL
		public RuleCall getOpOPRELACIONALParserRuleCall_1_0_0() { return cOpOPRELACIONALParserRuleCall_1_0_0; }
		
		//expressoes+=ExpressaoAritmetica
		public Assignment getExpressoesAssignment_1_1() { return cExpressoesAssignment_1_1; }
		
		//ExpressaoAritmetica
		public RuleCall getExpressoesExpressaoAritmeticaParserRuleCall_1_1_0() { return cExpressoesExpressaoAritmeticaParserRuleCall_1_1_0; }
	}
	public class ExpressaoAritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.ExpressaoAritmetica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermosAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermosTermoParserRuleCall_0_0 = (RuleCall)cTermosAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpOP1ParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cTermosAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermosTermoParserRuleCall_1_1_0 = (RuleCall)cTermosAssignment_1_1.eContents().get(0);
		
		//ExpressaoAritmetica:
		//	termos+=Termo (op+=OP1 termos+=Termo)*;
		@Override public ParserRule getRule() { return rule; }
		
		//termos+=Termo (op+=OP1 termos+=Termo)*
		public Group getGroup() { return cGroup; }
		
		//termos+=Termo
		public Assignment getTermosAssignment_0() { return cTermosAssignment_0; }
		
		//Termo
		public RuleCall getTermosTermoParserRuleCall_0_0() { return cTermosTermoParserRuleCall_0_0; }
		
		//(op+=OP1 termos+=Termo)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=OP1
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//OP1
		public RuleCall getOpOP1ParserRuleCall_1_0_0() { return cOpOP1ParserRuleCall_1_0_0; }
		
		//termos+=Termo
		public Assignment getTermosAssignment_1_1() { return cTermosAssignment_1_1; }
		
		//Termo
		public RuleCall getTermosTermoParserRuleCall_1_1_0() { return cTermosTermoParserRuleCall_1_1_0; }
	}
	public class TermoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Termo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFatoresAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFatoresFatorParserRuleCall_0_0 = (RuleCall)cFatoresAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpOP2ParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cFatoresAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFatoresFatorParserRuleCall_1_1_0 = (RuleCall)cFatoresAssignment_1_1.eContents().get(0);
		
		//Termo:
		//	fatores+=Fator (op+=OP2 fatores+=Fator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//fatores+=Fator (op+=OP2 fatores+=Fator)*
		public Group getGroup() { return cGroup; }
		
		//fatores+=Fator
		public Assignment getFatoresAssignment_0() { return cFatoresAssignment_0; }
		
		//Fator
		public RuleCall getFatoresFatorParserRuleCall_0_0() { return cFatoresFatorParserRuleCall_0_0; }
		
		//(op+=OP2 fatores+=Fator)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=OP2
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//OP2
		public RuleCall getOpOP2ParserRuleCall_1_0_0() { return cOpOP2ParserRuleCall_1_0_0; }
		
		//fatores+=Fator
		public Assignment getFatoresAssignment_1_1() { return cFatoresAssignment_1_1; }
		
		//Fator
		public RuleCall getFatoresFatorParserRuleCall_1_1_0() { return cFatoresFatorParserRuleCall_1_1_0; }
	}
	public class FatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Fator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParcelasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParcelasParcelaParserRuleCall_0_0 = (RuleCall)cParcelasAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOpPercentSignKeyword_1_0_0 = (Keyword)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cParcelasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParcelasParcelaParserRuleCall_1_1_0 = (RuleCall)cParcelasAssignment_1_1.eContents().get(0);
		
		//Fator:
		//	parcelas+=Parcela (op+='%' parcelas+=Parcela)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parcelas+=Parcela (op+='%' parcelas+=Parcela)*
		public Group getGroup() { return cGroup; }
		
		//parcelas+=Parcela
		public Assignment getParcelasAssignment_0() { return cParcelasAssignment_0; }
		
		//Parcela
		public RuleCall getParcelasParcelaParserRuleCall_0_0() { return cParcelasParcelaParserRuleCall_0_0; }
		
		//(op+='%' parcelas+=Parcela)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+='%'
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//'%'
		public Keyword getOpPercentSignKeyword_1_0_0() { return cOpPercentSignKeyword_1_0_0; }
		
		//parcelas+=Parcela
		public Assignment getParcelasAssignment_1_1() { return cParcelasAssignment_1_1; }
		
		//Parcela
		public RuleCall getParcelasParcelaParserRuleCall_1_1_0() { return cParcelasParcelaParserRuleCall_1_1_0; }
	}
	public class ParcelaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Parcela");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSubHyphenMinusKeyword_0_0 = (Keyword)cSubAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cIdDeclaracaoCrossReference_1_0_0 = (CrossReference)cIdAssignment_1_0.eContents().get(0);
		private final RuleCall cIdDeclaracaoIDTerminalRuleCall_1_0_0_1 = (RuleCall)cIdDeclaracaoCrossReference_1_0_0.eContents().get(1);
		private final Assignment cIntAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_1_1_0 = (RuleCall)cIntAssignment_1_1.eContents().get(0);
		
		//Parcela:
		//	sub?='-'? (id=[Declaracao] | int=INT);
		@Override public ParserRule getRule() { return rule; }
		
		//sub?='-'? (id=[Declaracao] | int=INT)
		public Group getGroup() { return cGroup; }
		
		//sub?='-'?
		public Assignment getSubAssignment_0() { return cSubAssignment_0; }
		
		//'-'
		public Keyword getSubHyphenMinusKeyword_0_0() { return cSubHyphenMinusKeyword_0_0; }
		
		//(id=[Declaracao] | int=INT)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//id=[Declaracao]
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//[Declaracao]
		public CrossReference getIdDeclaracaoCrossReference_1_0_0() { return cIdDeclaracaoCrossReference_1_0_0; }
		
		//ID
		public RuleCall getIdDeclaracaoIDTerminalRuleCall_1_0_0_1() { return cIdDeclaracaoIDTerminalRuleCall_1_0_0_1; }
		
		//int=INT
		public Assignment getIntAssignment_1_1() { return cIntAssignment_1_1; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_1_1_0() { return cIntINTTerminalRuleCall_1_1_0; }
	}
	public class OP1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.OP1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OP1:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class OP2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.OP2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OP2:
		//	'*' | '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class OPRELACIONALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.OPRELACIONAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OPRELACIONAL:
		//	'==' | '!=' | '>=' | '<=' | '>' | '<';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!=' | '>=' | '<=' | '>' | '<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
	}
	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }
		
		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.E");
		private final Keyword cAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//E:
		//	'&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&'
		public Keyword getAmpersandKeyword() { return cAmpersandKeyword; }
	}
	public class OUElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.OU");
		private final Keyword cVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OU:
		//	'|';
		@Override public ParserRule getRule() { return rule; }
		
		//'|'
		public Keyword getVerticalLineKeyword() { return cVerticalLineKeyword; }
	}
	public class NAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.NAO");
		private final Keyword cExclamationMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//NAO:
		//	'!';
		@Override public ParserRule getRule() { return rule; }
		
		//'!'
		public Keyword getExclamationMarkKeyword() { return cExclamationMarkKeyword; }
	}
	public class TipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.PlayLang.Tipo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSTRINGKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cINTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBOOLKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Tipo:
		//	"STRING" | "INT" | "BOOL";
		@Override public ParserRule getRule() { return rule; }
		
		//"STRING" | "INT" | "BOOL"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"STRING"
		public Keyword getSTRINGKeyword_0() { return cSTRINGKeyword_0; }
		
		//"INT"
		public Keyword getINTKeyword_1() { return cINTKeyword_1; }
		
		//"BOOL"
		public Keyword getBOOLKeyword_2() { return cBOOLKeyword_2; }
	}
	
	
	private final GameElements pGame;
	private final EventoGlobalElements pEventoGlobal;
	private final DeclaracaoElements pDeclaracao;
	private final CenaElements pCena;
	private final ImagemElements pImagem;
	private final TextoElements pTexto;
	private final EscolhasElements pEscolhas;
	private final EscolhaElements pEscolha;
	private final ComandoElements pComando;
	private final RandomElements pRandom;
	private final PlaySoundElements pPlaySound;
	private final IfElements pIf;
	private final AtribuicaoElements pAtribuicao;
	private final ExpressaoElements pExpressao;
	private final TermoLogicoElements pTermoLogico;
	private final FatorLogicoElements pFatorLogico;
	private final Parcela_logicaElements pParcela_logica;
	private final ExpressaoRelacionalElements pExpressaoRelacional;
	private final ExpressaoAritmeticaElements pExpressaoAritmetica;
	private final TermoElements pTermo;
	private final FatorElements pFator;
	private final ParcelaElements pParcela;
	private final OP1Elements pOP1;
	private final OP2Elements pOP2;
	private final OPRELACIONALElements pOPRELACIONAL;
	private final BOOLElements pBOOL;
	private final EElements pE;
	private final OUElements pOU;
	private final NAOElements pNAO;
	private final TipoElements pTipo;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PlayLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGame = new GameElements();
		this.pEventoGlobal = new EventoGlobalElements();
		this.pDeclaracao = new DeclaracaoElements();
		this.pCena = new CenaElements();
		this.pImagem = new ImagemElements();
		this.pTexto = new TextoElements();
		this.pEscolhas = new EscolhasElements();
		this.pEscolha = new EscolhaElements();
		this.pComando = new ComandoElements();
		this.pRandom = new RandomElements();
		this.pPlaySound = new PlaySoundElements();
		this.pIf = new IfElements();
		this.pAtribuicao = new AtribuicaoElements();
		this.pExpressao = new ExpressaoElements();
		this.pTermoLogico = new TermoLogicoElements();
		this.pFatorLogico = new FatorLogicoElements();
		this.pParcela_logica = new Parcela_logicaElements();
		this.pExpressaoRelacional = new ExpressaoRelacionalElements();
		this.pExpressaoAritmetica = new ExpressaoAritmeticaElements();
		this.pTermo = new TermoElements();
		this.pFator = new FatorElements();
		this.pParcela = new ParcelaElements();
		this.pOP1 = new OP1Elements();
		this.pOP2 = new OP2Elements();
		this.pOPRELACIONAL = new OPRELACIONALElements();
		this.pBOOL = new BOOLElements();
		this.pE = new EElements();
		this.pOU = new OUElements();
		this.pNAO = new NAOElements();
		this.pTipo = new TipoElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufscar.dc.compiladores.PlayLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Game:
	//	"WINDOW_SIZE:" linha=INT "," coluna=INT declaracoes_globais+=Declaracao* evento=EventoGlobal? cenas+=Cena*;
	public GameElements getGameAccess() {
		return pGame;
	}
	
	public ParserRule getGameRule() {
		return getGameAccess().getRule();
	}
	
	//EventoGlobal:
	//	"globalEvent{" comandos+=Comando+ "}";
	public EventoGlobalElements getEventoGlobalAccess() {
		return pEventoGlobal;
	}
	
	public ParserRule getEventoGlobalRule() {
		return getEventoGlobalAccess().getRule();
	}
	
	///*Foi necessário usar a keyword ZERO na declaração de ints de valor 0
	// *pois o validador de tipos verifica se o valor foi atribuido a string,int ou bool,
	// * mas um int não inicializado tem valor zero, então é necessário usar a palavra chave
	// * para não dar erro. 
	// * Admito que é um tapa-buraco, mas modificar a regra INT de Terminals para retornar string
	// * causa problemas mais graves, e não podemos usar ?= pois o gerador precisa desses valores
	//*/ Declaracao:
	//	tipo=Tipo name=ID "=" (string=STRING | bool=BOOL | int=INT | zero="ZERO") ";";
	public DeclaracaoElements getDeclaracaoAccess() {
		return pDeclaracao;
	}
	
	public ParserRule getDeclaracaoRule() {
		return getDeclaracaoAccess().getRule();
	}
	
	//Cena:
	//	"Scene" name=ID "(" textos+=Texto+ imagem=Imagem? sound=PlaySound? escolhas+=Escolhas+ ");";
	public CenaElements getCenaAccess() {
		return pCena;
	}
	
	public ParserRule getCenaRule() {
		return getCenaAccess().getRule();
	}
	
	////Imagem inclue o caminho e opcionalmente as dimensões para os quais deve ser redimensionada
	//Imagem:
	//	"<" caminho=STRING ("," linha=INT ',' coluna=INT)? ">";
	public ImagemElements getImagemAccess() {
		return pImagem;
	}
	
	public ParserRule getImagemRule() {
		return getImagemAccess().getRule();
	}
	
	////Texto de uma cena ou escolha pode conter variáveis e strings, possibilitando a concatenação
	//Texto:
	//	text=STRING | var=[Declaracao];
	public TextoElements getTextoAccess() {
		return pTexto;
	}
	
	public ParserRule getTextoRule() {
		return getTextoAccess().getRule();
	}
	
	////As palavras-chave IF e ELSE definem quando um conjunto de escolhas será visível
	//Escolhas:
	//	singleChoice=Escolha | hasIf?="IF" "(" expressaoIf=Expressao ")" "{" escolhasIF+=Escolhas+ "}" (hasElse?="ELSE" "{"
	//	escolhasELSE+=Escolhas+ "}")?;
	public EscolhasElements getEscolhasAccess() {
		return pEscolhas;
	}
	
	public ParserRule getEscolhasRule() {
		return getEscolhasAccess().getRule();
	}
	
	////Os comandos entre parênteses são executados quando o jogador opta pela escolha
	//Escolha:
	//	"[[" textos+=Texto+ ("(" comando+=Comando+ ")")? "]]" (if=If | "->" id=[Cena]);
	public EscolhaElements getEscolhaAccess() {
		return pEscolha;
	}
	
	public ParserRule getEscolhaRule() {
		return getEscolhaAccess().getRule();
	}
	
	//Comando:
	//	Atribuicao | Random;
	public ComandoElements getComandoAccess() {
		return pComando;
	}
	
	public ParserRule getComandoRule() {
		return getComandoAccess().getRule();
	}
	
	//Random:
	//	"Random" "(" id=[Declaracao] ",[" (possibilidadesInt+=INT ("," possibilidadesInt+=INT)* | possibilidadesString+=STRING
	//	("," possibilidadesString+=STRING)* | possibilidadesBool+=BOOL ("," possibilidadesBool+=BOOL)*) "]" ")";
	public RandomElements getRandomAccess() {
		return pRandom;
	}
	
	public ParserRule getRandomRule() {
		return getRandomAccess().getRule();
	}
	
	//PlaySound:
	//	"PlaySound" "(" file_path=STRING ")";
	public PlaySoundElements getPlaySoundAccess() {
		return pPlaySound;
	}
	
	public ParserRule getPlaySoundRule() {
		return getPlaySoundAccess().getRule();
	}
	
	////As palavras-chave if e else definem para qual estado uma dada escolha irá levar
	//If:
	//	"if" "(" expressaoIf=Expressao ")" "->" idIf=[Cena] ("else" (elif=If | "->" idElse=[Cena]));
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Atribuicao:
	//	id=[Declaracao] "=" (expressao=Expressao | string=STRING);
	public AtribuicaoElements getAtribuicaoAccess() {
		return pAtribuicao;
	}
	
	public ParserRule getAtribuicaoRule() {
		return getAtribuicaoAccess().getRule();
	}
	
	//Expressao:
	//	termos+=TermoLogico (ou+=OU termos+=TermoLogico)*;
	public ExpressaoElements getExpressaoAccess() {
		return pExpressao;
	}
	
	public ParserRule getExpressaoRule() {
		return getExpressaoAccess().getRule();
	}
	
	//TermoLogico:
	//	fatores+=FatorLogico (e+=E fatores+=FatorLogico)*;
	public TermoLogicoElements getTermoLogicoAccess() {
		return pTermoLogico;
	}
	
	public ParserRule getTermoLogicoRule() {
		return getTermoLogicoAccess().getRule();
	}
	
	//FatorLogico:
	//	nao?=NAO? parcela=Parcela_logica;
	public FatorLogicoElements getFatorLogicoAccess() {
		return pFatorLogico;
	}
	
	public ParserRule getFatorLogicoRule() {
		return getFatorLogicoAccess().getRule();
	}
	
	//Parcela_logica:
	//	p=BOOL | exp=ExpressaoRelacional;
	public Parcela_logicaElements getParcela_logicaAccess() {
		return pParcela_logica;
	}
	
	public ParserRule getParcela_logicaRule() {
		return getParcela_logicaAccess().getRule();
	}
	
	//ExpressaoRelacional:
	//	expressoes+=ExpressaoAritmetica (op+=OPRELACIONAL expressoes+=ExpressaoAritmetica)*;
	public ExpressaoRelacionalElements getExpressaoRelacionalAccess() {
		return pExpressaoRelacional;
	}
	
	public ParserRule getExpressaoRelacionalRule() {
		return getExpressaoRelacionalAccess().getRule();
	}
	
	//ExpressaoAritmetica:
	//	termos+=Termo (op+=OP1 termos+=Termo)*;
	public ExpressaoAritmeticaElements getExpressaoAritmeticaAccess() {
		return pExpressaoAritmetica;
	}
	
	public ParserRule getExpressaoAritmeticaRule() {
		return getExpressaoAritmeticaAccess().getRule();
	}
	
	//Termo:
	//	fatores+=Fator (op+=OP2 fatores+=Fator)*;
	public TermoElements getTermoAccess() {
		return pTermo;
	}
	
	public ParserRule getTermoRule() {
		return getTermoAccess().getRule();
	}
	
	//Fator:
	//	parcelas+=Parcela (op+='%' parcelas+=Parcela)*;
	public FatorElements getFatorAccess() {
		return pFator;
	}
	
	public ParserRule getFatorRule() {
		return getFatorAccess().getRule();
	}
	
	//Parcela:
	//	sub?='-'? (id=[Declaracao] | int=INT);
	public ParcelaElements getParcelaAccess() {
		return pParcela;
	}
	
	public ParserRule getParcelaRule() {
		return getParcelaAccess().getRule();
	}
	
	//OP1:
	//	'+' | '-';
	public OP1Elements getOP1Access() {
		return pOP1;
	}
	
	public ParserRule getOP1Rule() {
		return getOP1Access().getRule();
	}
	
	//OP2:
	//	'*' | '/';
	public OP2Elements getOP2Access() {
		return pOP2;
	}
	
	public ParserRule getOP2Rule() {
		return getOP2Access().getRule();
	}
	
	//OPRELACIONAL:
	//	'==' | '!=' | '>=' | '<=' | '>' | '<';
	public OPRELACIONALElements getOPRELACIONALAccess() {
		return pOPRELACIONAL;
	}
	
	public ParserRule getOPRELACIONALRule() {
		return getOPRELACIONALAccess().getRule();
	}
	
	//BOOL:
	//	"true" | "false";
	public BOOLElements getBOOLAccess() {
		return pBOOL;
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}
	
	//E:
	//	'&';
	public EElements getEAccess() {
		return pE;
	}
	
	public ParserRule getERule() {
		return getEAccess().getRule();
	}
	
	//OU:
	//	'|';
	public OUElements getOUAccess() {
		return pOU;
	}
	
	public ParserRule getOURule() {
		return getOUAccess().getRule();
	}
	
	//NAO:
	//	'!';
	public NAOElements getNAOAccess() {
		return pNAO;
	}
	
	public ParserRule getNAORule() {
		return getNAOAccess().getRule();
	}
	
	//Tipo:
	//	"STRING" | "INT" | "BOOL";
	public TipoElements getTipoAccess() {
		return pTipo;
	}
	
	public ParserRule getTipoRule() {
		return getTipoAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
