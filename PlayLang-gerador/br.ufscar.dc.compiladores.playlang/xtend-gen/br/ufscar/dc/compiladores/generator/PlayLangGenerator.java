/**
 * generated by Xtext 2.23.0
 */
package br.ufscar.dc.compiladores.generator;

import br.ufscar.dc.compiladores.playLang.Atribuicao;
import br.ufscar.dc.compiladores.playLang.Cena;
import br.ufscar.dc.compiladores.playLang.Comando;
import br.ufscar.dc.compiladores.playLang.Declaracao;
import br.ufscar.dc.compiladores.playLang.Escolha;
import br.ufscar.dc.compiladores.playLang.Escolhas;
import br.ufscar.dc.compiladores.playLang.EventoGlobal;
import br.ufscar.dc.compiladores.playLang.Expressao;
import br.ufscar.dc.compiladores.playLang.ExpressaoAritmetica;
import br.ufscar.dc.compiladores.playLang.ExpressaoRelacional;
import br.ufscar.dc.compiladores.playLang.Fator;
import br.ufscar.dc.compiladores.playLang.FatorLogico;
import br.ufscar.dc.compiladores.playLang.Game;
import br.ufscar.dc.compiladores.playLang.If;
import br.ufscar.dc.compiladores.playLang.Imagem;
import br.ufscar.dc.compiladores.playLang.Parcela;
import br.ufscar.dc.compiladores.playLang.Parcela_logica;
import br.ufscar.dc.compiladores.playLang.PlaySound;
import br.ufscar.dc.compiladores.playLang.Random;
import br.ufscar.dc.compiladores.playLang.Termo;
import br.ufscar.dc.compiladores.playLang.TermoLogico;
import br.ufscar.dc.compiladores.playLang.Texto;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.io.File;
import java.io.FileInputStream;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PlayLangGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("Choice.java", this.compileChoice());
    fsa.generateFile("State.java", this.compileState());
    fsa.generateFile("GameState.java", this.compileGameState());
    Iterable<Game> _filter = Iterables.<Game>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Game.class);
    for (final Game e : _filter) {
      fsa.generateFile("Game.java", this.compileGame(e, fsa));
    }
  }
  
  public CharSequence compileChoice() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.LinkedHashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Choice {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String text;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<State> nextStates;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<String>formatArgs;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Choice(String text,ArrayList<String>formatArgs ,ArrayList<State>nextStates) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.text = text;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.nextStates = nextStates;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.formatArgs = formatArgs;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State getState() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return nextStates.get(0);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean visible() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getText(LinkedHashMap<String,Object> variables) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(formatArgs.isEmpty()) return text;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ArrayList<Object> aux = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(var arg:formatArgs) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("aux.add(variables.get(arg));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return String.format(text, aux.toArray());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileState() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.awt.image.BufferedImage;");
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.LinkedHashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.sound.sampled.AudioInputStream;");
    _builder.newLine();
    _builder.append("import javax.sound.sampled.AudioSystem;");
    _builder.newLine();
    _builder.append("import javax.sound.sampled.Clip;");
    _builder.newLine();
    _builder.append("import javax.sound.sampled.UnsupportedAudioFileException;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class State {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String text ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<Choice> choices;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<String> formatArgs;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("BufferedImage img;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("AudioInputStream stream;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Clip audio;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State (String text,ArrayList<String> args,BufferedImage img,String audioPath) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.text = text; ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.choices = new ArrayList<Choice>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.formatArgs = args;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.img = img;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("stream = AudioSystem.getAudioInputStream(getClass().getResource(audioPath));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("audio = AudioSystem.getClip();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("audio.open(stream);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("stream = null;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("audio = null;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void playSound() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(audio != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("audio.setFramePosition(0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("audio.start();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getText(LinkedHashMap<String,Object> variables) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(formatArgs.isEmpty()) return text;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ArrayList<Object> aux = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(var arg:formatArgs) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("aux.add(variables.get(arg));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return String.format(text, aux.toArray());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("public  BufferedImage getImage() {");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("return img;");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<Choice> getChoices(){");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("ArrayList<Choice> aux= new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("for(var choice:choices) {");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("if(choice.visible()) aux.add(choice);");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return aux;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addChoice(Choice choice) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("choices.add(choice);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileGameState() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.LinkedHashMap;");
    _builder.newLine();
    _builder.append("public class GameState {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State currentState ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("LinkedHashMap<String,Object> variables;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GameState() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("variables = new LinkedHashMap<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addVariable(String s, Object o) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("variables.put(s, o);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Object getVariable(String s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return variables.get(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State getState() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return currentState;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setState(State next) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("currentState = next;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public LinkedHashMap<String,Object> getVariables(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return variables;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSwingComponents(final Game game) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JFrame f=new JFrame();//creating instance of JFrame ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("f.setLayout(new GridBagLayout());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel imageAndText = new JPanel();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("imageAndText.setLayout(new BoxLayout(imageAndText,BoxLayout.PAGE_AXIS));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("imageAndText.setBackground(Color.BLACK);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel choices = new JPanel();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("choices.setBackground(Color.black);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("choices.setLayout(new BoxLayout(choices,BoxLayout.PAGE_AXIS));");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("GridBagConstraints constr = new GridBagConstraints();");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("constr.fill = GridBagConstraints.BOTH;");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("constr.gridy = 0;");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("constr.weightx = 1;");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("constr.weighty = 0.6;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("f.add(imageAndText,constr);");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("constr.gridy = 1;");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("constr.weighty = 0.4;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("f.add(choices,constr);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("f.pack();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("BufferedImage img = game.getState().getImage();");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("JLabel image = new JLabel();");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("if(img != null) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("image.setIcon(new ImageIcon((BufferedImage)img));");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("image.setAlignmentX(Component.CENTER_ALIGNMENT);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("imageAndText.add(image);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("AnimatedText b=new AnimatedText(game.getState().getText(game.getVariables()));//creating instance of JLabel");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ActionListener textHandler = new ActionListener() {");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("b.textCrawl();");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("if(b.done()) {");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("b.reset();");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("((Timer)e.getSource()).stop();");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t       ");
    _builder.append("//textAnimation(b,game.currentState.getText(game.getVariables()));");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("Timer textTimer = new Timer(6,textHandler);");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("b.setWrapStyleWord(true);");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("b.setLineWrap(true);");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("b.setOpaque(false);");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("b.setEditable(false);");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("b.setFocusable(false);");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("b.setBackground(UIManager.getColor(\"Label.background\"));");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("b.setFont(UIManager.getFont(\"Label.font\"));");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("b.setBorder(UIManager.getBorder(\"Label.border\"));");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("b.setForeground(Color.WHITE);");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("b.setBackground(Color.BLACK);");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("imageAndText.add(b);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<JLabel> currentChoices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MouseAdapter mouseListener = new MouseAdapter() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void mouseClicked(MouseEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    {
      EventoGlobal _evento = game.getEvento();
      boolean _tripleNotEquals = (_evento != null);
      if (_tripleNotEquals) {
        _builder.append("globalEvent(game);");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("game.getState().playSound();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("BufferedImage img = game.getState().getImage();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(img != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t ");
    _builder.append("image.setIcon(new ImageIcon(img));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t ");
    _builder.append("image.setIcon(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("b.setText(game.currentState.getText(game.getVariables()));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("textTimer.start();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int i = 0;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ArrayList<Choice> current = game.currentState.getChoices();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for(var c: current) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(i < currentChoices.size()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for(var l:currentChoices.get(i).getMouseListeners()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("currentChoices.get(i).removeMouseListener(l);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("currentChoices.get(i).addMouseListener(new MouseAdapter() {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("public void mouseClicked(MouseEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("game.setState(c.getState());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("currentChoices.get(i).addMouseListener(this);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("currentChoices.get(i).setText(c.getText(game.variables));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("currentChoices.get(i).setVisible(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("JLabel aux = new JLabel(c.getText(game.variables));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("aux.addMouseListener(this);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("aux.setForeground(Color.CYAN);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("currentChoices.add(aux);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("choices.add(aux);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("i++;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int aux = currentChoices.size() - current.size();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(aux > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for( i= current.size();i<currentChoices.size();i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("currentChoices.get(i).setVisible(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//Cria um JLabel para cada escolha");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(var c: game.currentState.getChoices()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JLabel aux = new JLabel(c.getText(game.variables));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("aux.addMouseListener(new MouseAdapter() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public void mouseClicked(MouseEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("game.setState(c.getState());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("aux.addMouseListener(mouseListener);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("aux.setForeground(Color.CYAN);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("choices.add(aux);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("currentChoices.add(aux);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("f.setSize(WIDTH,HEIGHT);  ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("f.setLocationRelativeTo(null);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("f.setVisible(true);//making the frame visible");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileAnimatedText() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class AnimatedText extends JTextArea {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int charIndex;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String a;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public AnimatedText(String text) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(text);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("charIndex = 0;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("a = \"\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void reset() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("charIndex = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a = \"\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void textCrawl() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean isWhiteSpace = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(a.length()==0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("a = getText();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("setText(\"\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!done()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(isWhiteSpace) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setText(this.getText()+a.charAt(charIndex));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!(a.charAt(charIndex) == \' \')) {\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("isWhiteSpace = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("charIndex++;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("repaint();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean done() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(a.equals(getText())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//public void paintComponent(Graphics g) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//super.paintComponent(g);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\tg.drawString(a,10,20);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileGlobalEvent(final EventoGlobal evento) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public static void globalEvent(GameState game){");
    _builder.newLine();
    {
      EList<Comando> _comandos = evento.getComandos();
      for(final Comando comando : _comandos) {
        _builder.append("\t");
        CharSequence _compileComando = this.compileComando(comando);
        _builder.append(_compileComando, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileGame(final Game game, final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.Component;");
    _builder.newLine();
    _builder.append("import java.awt.GridBagConstraints;");
    _builder.newLine();
    _builder.append("import java.awt.GridBagLayout;");
    _builder.newLine();
    _builder.append("import java.awt.event.MouseAdapter;");
    _builder.newLine();
    _builder.append("import java.awt.event.MouseEvent;");
    _builder.newLine();
    _builder.append("import java.awt.image.BufferedImage;");
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.List; ");
    _builder.newLine();
    _builder.append("import java.util.Random;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.append("import java.awt.Graphics;");
    _builder.newLine();
    _builder.append("import java.awt.GraphicsConfiguration;");
    _builder.newLine();
    _builder.append("import java.awt.GraphicsEnvironment;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.imageio.ImageIO;");
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.append("public class Game {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final static int WIDTH = ");
    int _linha = game.getLinha();
    _builder.append(_linha, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("final static int HEIGHT = ");
    int _coluna = game.getColuna();
    _builder.append(_coluna, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("final static Random r = new Random();");
    _builder.newLine();
    _builder.append("\t");
    {
      EventoGlobal _evento = game.getEvento();
      boolean _tripleNotEquals = (_evento != null);
      if (_tripleNotEquals) {
        CharSequence _compileGlobalEvent = this.compileGlobalEvent(game.getEvento());
        _builder.append(_compileGlobalEvent, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public static BufferedImage readImage(String path) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return ImageIO.read(Game.class.getClassLoader().getResource(path));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static BufferedImage readImage(String path,int w,int h) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("java.awt.Image aux = ImageIO.read(Game.class.getClassLoader().getResource(path));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("aux = aux.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("GraphicsConfiguration config= ge.getDefaultScreenDevice().getDefaultConfiguration();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BufferedImage img = config.createCompatibleImage(w, h);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Graphics g = img.getGraphics();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g.drawImage(aux,0,0,null);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g.dispose();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return img;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GameState game = new GameState();");
    _builder.newLine();
    {
      EList<Declaracao> _declaracoes_globais = game.getDeclaracoes_globais();
      for(final Declaracao decl : _declaracoes_globais) {
        CharSequence _compileDeclaracoes = this.compileDeclaracoes(decl);
        _builder.append(_compileDeclaracoes);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Cena> _cenas = game.getCenas();
      for(final Cena state : _cenas) {
        String _compileState = this.compileState(state, fsa);
        _builder.append(_compileState);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("game.setState(");
    String _name = game.getCenas().get(0).getName();
    _builder.append(_name);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      EList<Cena> _cenas_1 = game.getCenas();
      for(final Cena state_1 : _cenas_1) {
        String _compileChoices = this.compileChoices(state_1);
        _builder.append(_compileChoices);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    CharSequence _compileSwingComponents = this.compileSwingComponents(game);
    _builder.append(_compileSwingComponents);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    CharSequence _compileAnimatedText = this.compileAnimatedText();
    _builder.append(_compileAnimatedText);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileDeclaracoes(final Declaracao decl) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("game.addVariable(\"");
    String _name = decl.getName();
    _builder.append(_name);
    _builder.append("\", ");
    {
      String _string = decl.getString();
      boolean _tripleNotEquals = (_string != null);
      if (_tripleNotEquals) {
        _builder.append("\"");
        String _string_1 = decl.getString();
        _builder.append(_string_1);
        _builder.append("\"");
      } else {
        String _bool = decl.getBool();
        boolean _tripleNotEquals_1 = (_bool != null);
        if (_tripleNotEquals_1) {
          String _bool_1 = decl.getBool();
          _builder.append(_bool_1);
        } else {
          int _int = decl.getInt();
          boolean _notEquals = (_int != 0);
          if (_notEquals) {
            int _int_1 = decl.getInt();
            _builder.append(_int_1);
          } else {
            _builder.append("0");
          }
        }
      }
    }
    _builder.append(");");
    return _builder;
  }
  
  public String compileState(final Cena cena, final IFileSystemAccess2 fsa) {
    try {
      String _name = cena.getName();
      String _plus = ("State " + _name);
      String _plus_1 = (_plus + " = new State(");
      CharSequence _compileText = this.compileText(cena.getTextos());
      String _plus_2 = (_plus_1 + _compileText);
      String s = (_plus_2 + ",new ArrayList<String>(");
      String aux = "";
      boolean first = true;
      EList<Texto> _textos = cena.getTextos();
      for (final Texto t : _textos) {
        Declaracao _var = t.getVar();
        boolean _tripleNotEquals = (_var != null);
        if (_tripleNotEquals) {
          if (first) {
            String _s = s;
            s = (_s + "Arrays.asList(");
            first = false;
          }
          String _s_1 = s;
          s = (_s_1 + aux);
          String _s_2 = s;
          String _name_1 = t.getVar().getName();
          String _plus_3 = ("\"" + _name_1);
          String _plus_4 = (_plus_3 + "\"");
          s = (_s_2 + _plus_4);
          aux = ",";
        }
      }
      if ((!first)) {
        String _s_3 = s;
        s = (_s_3 + ")");
      }
      String _s_4 = s;
      s = (_s_4 + "),");
      Imagem _imagem = cena.getImagem();
      boolean _tripleNotEquals_1 = (_imagem != null);
      if (_tripleNotEquals_1) {
        String _s_5 = s;
        Imagem _imagem_1 = cena.getImagem();
        String _name_2 = cena.getName();
        String _plus_5 = ("resources/" + _name_2);
        String _substring = cena.getImagem().getCaminho().substring(cena.getImagem().getCaminho().lastIndexOf("."));
        String _plus_6 = (_plus_5 + _substring);
        CharSequence _compileImage = this.compileImage(_imagem_1, _plus_6);
        s = (_s_5 + _compileImage);
        String _name_3 = cena.getName();
        String _plus_7 = ("resources/" + _name_3);
        String _substring_1 = cena.getImagem().getCaminho().substring(cena.getImagem().getCaminho().lastIndexOf("."));
        String _plus_8 = (_plus_7 + _substring_1);
        String _caminho = cena.getImagem().getCaminho();
        File _file = new File(_caminho);
        FileInputStream _fileInputStream = new FileInputStream(_file);
        fsa.generateFile(_plus_8, _fileInputStream);
      } else {
        String _s_6 = s;
        s = (_s_6 + "null");
      }
      String _s_7 = s;
      s = (_s_7 + ",");
      PlaySound _sound = cena.getSound();
      boolean _tripleNotEquals_2 = (_sound != null);
      if (_tripleNotEquals_2) {
        String _s_8 = s;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"resources/");
        String _name_4 = cena.getName();
        String _substring_2 = cena.getSound().getFile_path().substring(cena.getSound().getFile_path().lastIndexOf("."));
        String _plus_9 = (_name_4 + _substring_2);
        _builder.append(_plus_9);
        _builder.append("\"");
        s = (_s_8 + _builder);
        String _name_5 = cena.getName();
        String _plus_10 = ("resources/" + _name_5);
        String _substring_3 = cena.getSound().getFile_path().substring(cena.getSound().getFile_path().lastIndexOf("."));
        String _plus_11 = (_plus_10 + _substring_3);
        String _file_path = cena.getSound().getFile_path();
        File _file_1 = new File(_file_path);
        FileInputStream _fileInputStream_1 = new FileInputStream(_file_1);
        fsa.generateFile(_plus_11, _fileInputStream_1);
      } else {
        String _s_9 = s;
        s = (_s_9 + null);
      }
      String _s_10 = s;
      s = (_s_10 + ");");
      return s;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public CharSequence compileImage(final Imagem imagem, final String path) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("readImage(\"");
    _builder.append(path);
    _builder.append("\"");
    {
      int _linha = imagem.getLinha();
      boolean _tripleNotEquals = (_linha != 0);
      if (_tripleNotEquals) {
        _builder.append(",");
        int _linha_1 = imagem.getLinha();
        _builder.append(_linha_1);
        _builder.append(",");
        int _coluna = imagem.getColuna();
        _builder.append(_coluna);
      }
    }
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileText(final EList<Texto> text) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    {
      for(final Texto t : text) {
        {
          Declaracao _var = t.getVar();
          boolean _tripleNotEquals = (_var != null);
          if (_tripleNotEquals) {
            {
              String _tipo = t.getVar().getTipo();
              boolean _equals = Objects.equal(_tipo, "STRING");
              if (_equals) {
                _builder.append("%s");
              } else {
                String _tipo_1 = t.getVar().getTipo();
                boolean _equals_1 = Objects.equal(_tipo_1, "INT");
                if (_equals_1) {
                  _builder.append("%d");
                } else {
                  _builder.append("%b\"");
                }
              }
            }
          } else {
            String _text = t.getText();
            _builder.append(_text);
          }
        }
      }
    }
    _builder.append("\"");
    return _builder;
  }
  
  public String compileChoices(final Cena cena) {
    String s = "";
    String visibilityFunction = "";
    EList<Escolhas> _escolhas = cena.getEscolhas();
    for (final Escolhas choice : _escolhas) {
      boolean _isHasIf = choice.isHasIf();
      if (_isHasIf) {
        visibilityFunction = "public boolean visible() {\nif(";
        String _visibilityFunction = visibilityFunction;
        String _compileExpression = this.compileExpression(choice.getExpressaoIf());
        visibilityFunction = (_visibilityFunction + _compileExpression);
        String _visibilityFunction_1 = visibilityFunction;
        visibilityFunction = (_visibilityFunction_1 + "){");
        String _s = s;
        String _compileIfElseChoices = this.compileIfElseChoices(choice.getEscolhasIF(), visibilityFunction, cena, 1, false);
        s = (_s + _compileIfElseChoices);
        boolean _isHasElse = choice.isHasElse();
        if (_isHasElse) {
          String _s_1 = s;
          String _compileIfElseChoices_1 = this.compileIfElseChoices(choice.getEscolhasELSE(), visibilityFunction, cena, 1, true);
          s = (_s_1 + _compileIfElseChoices_1);
          String _visibilityFunction_2 = visibilityFunction;
          visibilityFunction = (_visibilityFunction_2 + "}");
        }
      } else {
        String _s_2 = s;
        String _name = cena.getName();
        String _plus = (_name + ".addChoice( new Choice(");
        CharSequence _compileText = this.compileText(choice.getSingleChoice().getTextos());
        String _plus_1 = (_plus + _compileText);
        String _plus_2 = (_plus_1 + ",new ArrayList<String>(");
        s = (_s_2 + _plus_2);
        String aux = "";
        boolean first = true;
        EList<Texto> _textos = choice.getSingleChoice().getTextos();
        for (final Texto t : _textos) {
          Declaracao _var = t.getVar();
          boolean _tripleNotEquals = (_var != null);
          if (_tripleNotEquals) {
            if (first) {
              String _s_3 = s;
              s = (_s_3 + "Arrays.asList(");
              first = false;
            }
            String _s_4 = s;
            s = (_s_4 + aux);
            String _s_5 = s;
            String _name_1 = t.getVar().getName();
            String _plus_3 = ("\"" + _name_1);
            String _plus_4 = (_plus_3 + "\"");
            s = (_s_5 + _plus_4);
            aux = ",";
          }
        }
        if ((!first)) {
          String _s_6 = s;
          s = (_s_6 + ")");
        }
        String _s_7 = s;
        s = (_s_7 + "),new ArrayList<State>(Arrays.asList(");
        If _if = choice.getSingleChoice().getIf();
        boolean _tripleEquals = (_if == null);
        if (_tripleEquals) {
          String _s_8 = s;
          String _name_2 = choice.getSingleChoice().getId().getName();
          s = (_s_8 + _name_2);
        }
        String _s_9 = s;
        String _compileChoiceCommand = this.compileChoiceCommand(choice.getSingleChoice());
        String _plus_5 = ("))){" + _compileChoiceCommand);
        String _plus_6 = (_plus_5 + "}\n);");
        s = (_s_9 + _plus_6);
      }
    }
    return s;
  }
  
  public String compileIfElseChoices(final EList<Escolhas> escolhas, final String v, final Cena cena, final int i, final boolean isElse) {
    String visibilityFunction = v;
    String s = "";
    for (final Escolhas choice : escolhas) {
      boolean _isHasIf = choice.isHasIf();
      if (_isHasIf) {
        String _visibilityFunction = visibilityFunction;
        visibilityFunction = (_visibilityFunction + "\nif(");
        String _visibilityFunction_1 = visibilityFunction;
        String _compileExpression = this.compileExpression(choice.getExpressaoIf());
        visibilityFunction = (_visibilityFunction_1 + _compileExpression);
        String _visibilityFunction_2 = visibilityFunction;
        visibilityFunction = (_visibilityFunction_2 + "){");
        String _s = s;
        String _compileIfElseChoices = this.compileIfElseChoices(choice.getEscolhasIF(), visibilityFunction, cena, (i + 1), false);
        s = (_s + _compileIfElseChoices);
        boolean _isHasElse = choice.isHasElse();
        if (_isHasElse) {
          String _s_1 = s;
          String _compileIfElseChoices_1 = this.compileIfElseChoices(choice.getEscolhasELSE(), visibilityFunction, cena, (i + 1), true);
          s = (_s_1 + _compileIfElseChoices_1);
        }
      } else {
        visibilityFunction = v;
        String _s_2 = s;
        String _name = cena.getName();
        String _plus = (_name + ".addChoice( new Choice( ");
        CharSequence _compileText = this.compileText(choice.getSingleChoice().getTextos());
        String _plus_1 = (_plus + _compileText);
        String _plus_2 = (_plus_1 + ",new ArrayList<String>(");
        s = (_s_2 + _plus_2);
        String aux = "";
        boolean first = true;
        EList<Texto> _textos = choice.getSingleChoice().getTextos();
        for (final Texto t : _textos) {
          Declaracao _var = t.getVar();
          boolean _tripleNotEquals = (_var != null);
          if (_tripleNotEquals) {
            if (first) {
              String _s_3 = s;
              s = (_s_3 + "Arrays.asList(");
              first = false;
            }
            String _s_4 = s;
            s = (_s_4 + aux);
            String _s_5 = s;
            String _name_1 = t.getVar().getName();
            String _plus_3 = ("\"" + _name_1);
            String _plus_4 = (_plus_3 + "\"");
            s = (_s_5 + _plus_4);
            aux = ",";
          }
        }
        if ((!first)) {
          String _s_6 = s;
          s = (_s_6 + ")");
        }
        String _s_7 = s;
        s = (_s_7 + "),new ArrayList<State>(Arrays.asList(");
        If _if = choice.getSingleChoice().getIf();
        boolean _tripleEquals = (_if == null);
        if (_tripleEquals) {
          String _s_8 = s;
          String _name_2 = choice.getSingleChoice().getId().getName();
          s = (_s_8 + _name_2);
        }
        String _s_9 = s;
        s = (_s_9 + ("))){\n" + visibilityFunction));
        if ((!isElse)) {
          String _s_10 = s;
          s = (_s_10 + "return true;}\n else{return false;}}\n");
        } else {
          String _s_11 = s;
          s = (_s_11 + "return false;}\n else{return true;}}\n");
        }
        first = true;
        for (int a = 0; (a < (i - 1)); a++) {
          {
            String _s_12 = s;
            s = (_s_12 + "else{return false;}");
            String _s_13 = s;
            s = (_s_13 + "\n}");
          }
        }
        String _s_12 = s;
        String _compileChoiceCommand = this.compileChoiceCommand(choice.getSingleChoice());
        s = (_s_12 + _compileChoiceCommand);
        String _s_13 = s;
        s = (_s_13 + "\n}\n");
        String _s_14 = s;
        s = (_s_14 + ");\n");
      }
    }
    return s;
  }
  
  public String compileChoiceCommand(final Escolha choice) {
    String s = "";
    if (((choice.getIf() == null) && (choice.getComando().size() == 0))) {
      return "";
    }
    s = "\n public State getState(){";
    int _size = choice.getComando().size();
    boolean _notEquals = (_size != 0);
    if (_notEquals) {
      EList<Comando> _comando = choice.getComando();
      for (final Comando c : _comando) {
        {
          String _s = s;
          s = (_s + "\n");
          String _s_1 = s;
          CharSequence _compileComando = this.compileComando(c);
          s = (_s_1 + _compileComando);
        }
      }
    }
    If _if = choice.getIf();
    boolean _tripleNotEquals = (_if != null);
    if (_tripleNotEquals) {
      String _s = s;
      String _compileChoiceConditionals = this.compileChoiceConditionals(choice.getIf());
      s = (_s + _compileChoiceConditionals);
      String _s_1 = s;
      s = (_s_1 + "\n}");
    } else {
      String _s_2 = s;
      String _name = choice.getId().getName();
      String _plus = ("\n return " + _name);
      String _plus_1 = (_plus + ";\n}\n");
      s = (_s_2 + _plus_1);
    }
    return s;
  }
  
  protected CharSequence _compileComando(final Random random) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("game.addVariable(\"");
    String _name = random.getId().getName();
    _builder.append(_name);
    _builder.append("\",");
    String s = _builder.toString();
    String aux = "";
    String _s = s;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("List.of(");
    s = (_s + _builder_1);
    int _size = random.getPossibilidadesBool().size();
    boolean _notEquals = (_size != 0);
    if (_notEquals) {
      EList<String> _possibilidadesBool = random.getPossibilidadesBool();
      for (final String b : _possibilidadesBool) {
        {
          String _s_1 = s;
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append(aux);
          _builder_2.append(b);
          s = (_s_1 + _builder_2);
          aux = ",";
        }
      }
      String _s_1 = s;
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append(").get(r.nextInt(");
      int _size_1 = random.getPossibilidadesBool().size();
      _builder_2.append(_size_1);
      _builder_2.append("))");
      s = (_s_1 + _builder_2);
    }
    int _size_2 = random.getPossibilidadesString().size();
    boolean _notEquals_1 = (_size_2 != 0);
    if (_notEquals_1) {
      EList<String> _possibilidadesString = random.getPossibilidadesString();
      for (final String st : _possibilidadesString) {
        {
          String _s_2 = s;
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append(aux);
          _builder_3.append("\"");
          _builder_3.append(st);
          _builder_3.append("\"");
          s = (_s_2 + _builder_3);
          aux = ",";
        }
      }
      String _s_2 = s;
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append(").get(r.nextInt(");
      int _size_3 = random.getPossibilidadesString().size();
      _builder_3.append(_size_3);
      _builder_3.append("))");
      s = (_s_2 + _builder_3);
    }
    int _size_4 = random.getPossibilidadesInt().size();
    boolean _notEquals_2 = (_size_4 != 0);
    if (_notEquals_2) {
      EList<Integer> _possibilidadesInt = random.getPossibilidadesInt();
      for (final Integer i : _possibilidadesInt) {
        {
          String _s_3 = s;
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append(aux);
          _builder_4.append(i);
          s = (_s_3 + _builder_4);
          aux = ",";
        }
      }
      String _s_3 = s;
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append(").get(r.nextInt(");
      int _size_5 = random.getPossibilidadesInt().size();
      _builder_4.append(_size_5);
      _builder_4.append("))");
      s = (_s_3 + _builder_4);
    }
    String _s_4 = s;
    s = (_s_4 + ");");
    return s;
  }
  
  protected CharSequence _compileComando(final Atribuicao atribuicao) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _string = atribuicao.getString();
      boolean _tripleEquals = (_string == null);
      if (_tripleEquals) {
        _builder.append("game.addVariable(\"");
        String _name = atribuicao.getId().getName();
        _builder.append(_name);
        _builder.append("\",");
        String _compileExpression = this.compileExpression(atribuicao.getExpressao());
        _builder.append(_compileExpression);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("game.addVariable(\"");
        String _name_1 = atribuicao.getId().getName();
        _builder.append(_name_1);
        _builder.append("\",\"");
        String _string_1 = atribuicao.getString();
        _builder.append(_string_1);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String compileChoiceConditionals(final If i) {
    String _compileExpression = this.compileExpression(i.getExpressaoIf());
    String _plus = ("if(" + _compileExpression);
    String _plus_1 = (_plus + "){\n");
    String _plus_2 = (_plus_1 + "return ");
    String _name = i.getIdIf().getName();
    String _plus_3 = (_plus_2 + _name);
    String s = (_plus_3 + ";\n}\n");
    If _elif = i.getElif();
    boolean _tripleEquals = (_elif == null);
    if (_tripleEquals) {
      String _s = s;
      String _name_1 = i.getIdElse().getName();
      String _plus_4 = ("else{\nreturn " + _name_1);
      String _plus_5 = (_plus_4 + ";\n}\n");
      s = (_s + _plus_5);
    } else {
      String _s_1 = s;
      String _compileChoiceConditionals = this.compileChoiceConditionals(i.getElif());
      String _plus_6 = ("else if{" + _compileChoiceConditionals);
      String _plus_7 = (_plus_6 + "}");
      s = (_s_1 + _plus_7);
    }
    return s;
  }
  
  public String compileExpression(final Expressao exp) {
    String s = "";
    s = this.compileTermoL(exp.getTermos().get(0));
    int i = 1;
    EList<String> _ou = exp.getOu();
    for (final String op : _ou) {
      {
        String _s = s;
        s = (_s + (((" " + op) + op) + " "));
        String _s_1 = s;
        String _compileTermoL = this.compileTermoL(exp.getTermos().get(i));
        s = (_s_1 + _compileTermoL);
        i++;
      }
    }
    return s;
  }
  
  public String compileTermoL(final TermoLogico termo) {
    String s = this.compileFatorL(termo.getFatores().get(0));
    int i = 1;
    EList<String> _e = termo.getE();
    for (final String op : _e) {
      {
        String _s = s;
        s = (_s + (((" " + op) + op) + " "));
        String _s_1 = s;
        String _compileFatorL = this.compileFatorL(termo.getFatores().get(i));
        s = (_s_1 + _compileFatorL);
        i++;
      }
    }
    return s;
  }
  
  public String compileFatorL(final FatorLogico fator) {
    String s = "";
    boolean _isNao = fator.isNao();
    if (_isNao) {
      String _s = s;
      s = (_s + "!");
    }
    String _s_1 = s;
    String _compileParcelaL = this.compileParcelaL(fator.getParcela());
    s = (_s_1 + _compileParcelaL);
    return s;
  }
  
  public String compileParcelaL(final Parcela_logica parcela) {
    String s = "";
    String _p = parcela.getP();
    boolean _tripleNotEquals = (_p != null);
    if (_tripleNotEquals) {
      String _s = s;
      String _p_1 = parcela.getP();
      s = (_s + _p_1);
    } else {
      String _s_1 = s;
      String _compileExpressaoRelacional = this.compileExpressaoRelacional(parcela.getExp());
      String _plus = ("(" + _compileExpressaoRelacional);
      String _plus_1 = (_plus + ")");
      s = (_s_1 + _plus_1);
    }
    return s;
  }
  
  public String compileExpressaoRelacional(final ExpressaoRelacional exp) {
    String s = this.compileExpressaoAritmetica(exp.getExpressoes().get(0));
    int i = 1;
    EList<String> _op = exp.getOp();
    for (final String op : _op) {
      {
        String _s = s;
        s = (_s + ((" " + op) + " "));
        String _s_1 = s;
        String _compileExpressaoAritmetica = this.compileExpressaoAritmetica(exp.getExpressoes().get(i));
        s = (_s_1 + _compileExpressaoAritmetica);
        i++;
      }
    }
    return s;
  }
  
  public String compileExpressaoAritmetica(final ExpressaoAritmetica exp) {
    String s = this.compileTermo(exp.getTermos().get(0));
    int i = 1;
    EList<String> _op = exp.getOp();
    for (final String op : _op) {
      {
        String _s = s;
        s = (_s + ((" " + op) + " "));
        String _s_1 = s;
        String _compileTermo = this.compileTermo(exp.getTermos().get(i));
        s = (_s_1 + _compileTermo);
        i++;
      }
    }
    return s;
  }
  
  public String compileTermo(final Termo termo) {
    String s = this.compileFator(termo.getFatores().get(0));
    int i = 1;
    EList<String> _op = termo.getOp();
    for (final String op : _op) {
      {
        String _s = s;
        s = (_s + ((" " + op) + " "));
        String _s_1 = s;
        String _compileFator = this.compileFator(termo.getFatores().get(i));
        s = (_s_1 + _compileFator);
        i++;
      }
    }
    return s;
  }
  
  public String compileFator(final Fator fator) {
    String s = this.compileParcela(fator.getParcelas().get(0));
    int i = 1;
    EList<String> _op = fator.getOp();
    for (final String op : _op) {
      {
        String _s = s;
        s = (_s + ((" " + op) + " "));
        String _s_1 = s;
        String _compileParcela = this.compileParcela(fator.getParcelas().get(i));
        s = (_s_1 + _compileParcela);
        i++;
      }
    }
    return s;
  }
  
  public String compileParcela(final Parcela parcela) {
    String s = "";
    boolean _isSub = parcela.isSub();
    if (_isSub) {
      String _s = s;
      s = (_s + "-");
    }
    Declaracao _id = parcela.getId();
    boolean _tripleNotEquals = (_id != null);
    if (_tripleNotEquals) {
      String _tipo = parcela.getId().getTipo();
      if (_tipo != null) {
        switch (_tipo) {
          case "STRING":
            String _s_1 = s;
            s = (_s_1 + "(String)");
            break;
          case "BOOL":
            String _s_2 = s;
            s = (_s_2 + "(boolean)");
            break;
          case "INT":
            String _s_3 = s;
            s = (_s_3 + "(Integer)");
            break;
        }
      }
      String _s_4 = s;
      String _name = parcela.getId().getName();
      String _plus = ("game.variables.get(\"" + _name);
      String _plus_1 = (_plus + "\")");
      s = (_s_4 + _plus_1);
    } else {
      String _s_5 = s;
      int _int = parcela.getInt();
      s = (_s_5 + Integer.valueOf(_int));
    }
    return s;
  }
  
  public CharSequence compileComando(final Comando atribuicao) {
    if (atribuicao instanceof Atribuicao) {
      return _compileComando((Atribuicao)atribuicao);
    } else if (atribuicao instanceof Random) {
      return _compileComando((Random)atribuicao);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(atribuicao).toString());
    }
  }
}
