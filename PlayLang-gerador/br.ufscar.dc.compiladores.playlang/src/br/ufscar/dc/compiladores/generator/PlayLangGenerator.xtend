/*
 * generated by Xtext 2.23.0
 */
package br.ufscar.dc.compiladores.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import br.ufscar.dc.compiladores.playLang.Game
import br.ufscar.dc.compiladores.playLang.Declaracao
import br.ufscar.dc.compiladores.playLang.Cena
import br.ufscar.dc.compiladores.playLang.Texto
import org.eclipse.emf.common.util.EList
import br.ufscar.dc.compiladores.playLang.Escolhas
import br.ufscar.dc.compiladores.playLang.Expressao
import br.ufscar.dc.compiladores.playLang.Termo
import br.ufscar.dc.compiladores.playLang.TermoLogico
import br.ufscar.dc.compiladores.playLang.FatorLogico
import br.ufscar.dc.compiladores.playLang.Parcela_logica
import br.ufscar.dc.compiladores.playLang.ExpressaoRelacional
import br.ufscar.dc.compiladores.playLang.ExpressaoAritmetica
import br.ufscar.dc.compiladores.playLang.Fator
import br.ufscar.dc.compiladores.playLang.Parcela
import br.ufscar.dc.compiladores.playLang.Escolha
import br.ufscar.dc.compiladores.playLang.Atribuicao
import br.ufscar.dc.compiladores.playLang.If
import br.ufscar.dc.compiladores.playLang.PlaySound
import br.ufscar.dc.compiladores.playLang.Imagem
import javax.tools.JavaCompiler
import javax.tools.ToolProvider
import java.io.File
import org.eclipse.xtext.generator.IFileSystemAccessExtension2
import br.ufscar.dc.compiladores.playLang.Random
import br.ufscar.dc.compiladores.playLang.EventoGlobal
import javax.imageio.ImageIO
import java.io.FileInputStream
import java.io.DataInputStream

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PlayLangGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//	var JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
	fsa.generateFile("Choice.java",compileChoice)
//	var teste = (fsa as IFileSystemAccessExtension2).getURI("Choice.java")
//	var teste2 = teste.toString
	//compiler.run(null,null,null, )
	fsa.generateFile("State.java",compileState)
	fsa.generateFile("GameState.java",compileGameState)
	for(e:resource.allContents.toIterable.filter(Game)){

		fsa.generateFile("Game.java",compileGame(e,fsa))

	}
	}
	
	//Gera a classe Choice
	def compileChoice()'''
	import java.util.ArrayList;
	import java.util.LinkedHashMap;
	
	
	public class Choice {
		String text;
		ArrayList<State> nextStates;
		ArrayList<String>formatArgs;
		public Choice(String text,ArrayList<String>formatArgs ,ArrayList<State>nextStates) {
			this.text = text;
			this.nextStates = nextStates;
			this.formatArgs = formatArgs;
		}
		
		public State getState() {
			return nextStates.get(0);
		}
		public boolean visible() {
			return true;
		}
		public String getText(LinkedHashMap<String,Object> variables) {
			if(formatArgs.isEmpty()) return text;
			else {
				ArrayList<Object> aux = new ArrayList<>();
				for(var arg:formatArgs) {
					aux.add(variables.get(arg));
				}
				
				return String.format(text, aux.toArray());
			}
		}
	}

	'''
	//Gera a classe State
	def compileState()'''
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashMap;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.UnsupportedAudioFileException;


public class State {
	String text ;
	ArrayList<Choice> choices;
	ArrayList<String> formatArgs;
	BufferedImage img;
	AudioInputStream stream;
	Clip audio;
	public State (String text,ArrayList<String> args,BufferedImage img,String audioPath) {
		this.text = text; 
		this.choices = new ArrayList<Choice>();
		this.formatArgs = args;
		this.img = img;
		try {
			stream = AudioSystem.getAudioInputStream(getClass().getResource(audioPath));
			audio = AudioSystem.getClip();
			audio.open(stream);
			
		} catch (Exception e) {
			stream = null;
			audio = null;
			//e.printStackTrace();
		}
		
	}
	public void playSound() {
		if(audio != null) {
			audio.setFramePosition(0);
			audio.start();
		}
	}
	
	public String getText(LinkedHashMap<String,Object> variables) {
		if(formatArgs.isEmpty()) return text;
		else {
			ArrayList<Object> aux = new ArrayList<>();
			for(var arg:formatArgs) {
				aux.add(variables.get(arg));
			}
			
			return String.format(text, aux.toArray());
		}
	}
	
	 public  BufferedImage getImage() {
		 return img;
	 }
	
	public ArrayList<Choice> getChoices(){
		 ArrayList<Choice> aux= new ArrayList<>();
		 for(var choice:choices) {
			 if(choice.visible()) aux.add(choice);
		 }
		return aux;
	}
	
	public void addChoice(Choice choice) {
		choices.add(choice);
	}
}





	'''
	//Gera a classe GameState
	def compileGameState()'''
	import java.util.LinkedHashMap;
	public class GameState {
	
		State currentState ;
		LinkedHashMap<String,Object> variables;
		
		public GameState() {
			variables = new LinkedHashMap<>();
		}
		
		public void addVariable(String s, Object o) {
			variables.put(s, o);
		}
		
		public Object getVariable(String s) {
			return variables.get(s);
		}
		
		public State getState() {
			return currentState;
		}
		public void setState(State next) {
			currentState = next;
		}
		public LinkedHashMap<String,Object> getVariables(){
			return variables;
		}
	}
	
	'''
	
	//Gera os componentes Swing que compôem o aspecto gráfico da aplicação
	def compileSwingComponents(Game game)'''
	JFrame f=new JFrame();//creating instance of JFrame 
			f.setLayout(new GridBagLayout());
			JPanel imageAndText = new JPanel();
			imageAndText.setLayout(new BoxLayout(imageAndText,BoxLayout.PAGE_AXIS));
			imageAndText.setBackground(Color.BLACK);
			JPanel choices = new JPanel();
			choices.setBackground(Color.black);
			choices.setLayout(new BoxLayout(choices,BoxLayout.PAGE_AXIS));
			 GridBagConstraints constr = new GridBagConstraints();
			 constr.fill = GridBagConstraints.BOTH;
			 constr.gridy = 0;
			 constr.weightx = 1;
			 constr.weighty = 0.6;
			f.add(imageAndText,constr);
			 constr.gridy = 1;
			 constr.weighty = 0.4;
			f.add(choices,constr);
			f.pack();
			
		 BufferedImage img = game.getState().getImage();
		 JLabel image = new JLabel();
		 if(img != null) {
			image.setIcon(new ImageIcon((BufferedImage)img));
		 }
			image.setAlignmentX(Component.CENTER_ALIGNMENT);
			imageAndText.add(image);
				
			AnimatedText b=new AnimatedText(game.getState().getText(game.getVariables()));//creating instance of JLabel
			ActionListener textHandler = new ActionListener() {
			   public void actionPerformed(ActionEvent e) {
			       b.textCrawl();
			       if(b.done()) {
			        	b.reset();
			        	((Timer)e.getSource()).stop();
			        	}
			       //textAnimation(b,game.currentState.getText(game.getVariables()));
			  }
			 };
			 Timer textTimer = new Timer(6,textHandler);
				   
				    
			 b.setWrapStyleWord(true);
		     b.setLineWrap(true);
			 b.setOpaque(false);
			 b.setEditable(false);
			 b.setFocusable(false);
			 b.setBackground(UIManager.getColor("Label.background"));
			 b.setFont(UIManager.getFont("Label.font"));
			 b.setBorder(UIManager.getBorder("Label.border"));
			 b.setForeground(Color.WHITE);
			 b.setBackground(Color.BLACK);
			 
			imageAndText.add(b);
			ArrayList<JLabel> currentChoices = new ArrayList<>();
			
			MouseAdapter mouseListener = new MouseAdapter() {
				public void mouseClicked(MouseEvent e) {
					«IF game.evento !== null»globalEvent(game);«ENDIF»
					game.getState().playSound();
					BufferedImage img = game.getState().getImage();
					if(img != null) {
						 image.setIcon(new ImageIcon(img));
						}
						else {
						 image.setIcon(null);
						}				
					b.setText(game.currentState.getText(game.getVariables()));
					textTimer.start();
					int i = 0;
					ArrayList<Choice> current = game.currentState.getChoices();
					for(var c: current) {
						if(i < currentChoices.size()) {
							for(var l:currentChoices.get(i).getMouseListeners()) {
								currentChoices.get(i).removeMouseListener(l);
							}
							currentChoices.get(i).addMouseListener(new MouseAdapter() {
								public void mouseClicked(MouseEvent e) {
									game.setState(c.getState());
								}
							});
							currentChoices.get(i).addMouseListener(this);
							currentChoices.get(i).setText(c.getText(game.variables));
							currentChoices.get(i).setVisible(true);
							
						}
						else {
							JLabel aux = new JLabel(c.getText(game.variables));
							aux.addMouseListener(this);
							aux.setForeground(Color.CYAN);
							currentChoices.add(aux);
							choices.add(aux);
						}
						i++;
					}
					int aux = currentChoices.size() - current.size();
					if(aux > 0) {
						for( i= current.size();i<currentChoices.size();i++) {
							currentChoices.get(i).setVisible(false);
						}
					}
					
				}
			};
			
			//Cria um JLabel para cada escolha
			for(var c: game.currentState.getChoices()) {
				JLabel aux = new JLabel(c.getText(game.variables));
				aux.addMouseListener(new MouseAdapter() {
					public void mouseClicked(MouseEvent e) {
						game.setState(c.getState());
					}
				});
				aux.addMouseListener(mouseListener);
				aux.setForeground(Color.CYAN);
				choices.add(aux);
				currentChoices.add(aux);
				
			}
			f.setSize(WIDTH,HEIGHT);  
			f.setLocationRelativeTo(null);
			f.setVisible(true);//making the frame visible
			f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  
	'''
	//Gera a classe AnimatedText que lida com a animação do texto principal
	def compileAnimatedText()'''
class AnimatedText extends JTextArea {
	private int charIndex;
	private String a;
	public AnimatedText(String text) {
		super(text);
		charIndex = 0;
	    a = "";
	}
	public void reset() {
		charIndex = 0;
		a = "";
	}
	public void textCrawl() {
		boolean isWhiteSpace = true;
		if(a.length()==0) {
			a = getText();
			setText("");
		}
		if(!done()) {
			while(isWhiteSpace) {
		setText(this.getText()+a.charAt(charIndex));
		if(!(a.charAt(charIndex) == ' ')) {		
			isWhiteSpace = false;
		}
		charIndex++;
		}
		repaint();
		}
	}
	public boolean done() {
		if(a.equals(getText())) {
			return true;
		}
		return false;
	}
	//public void paintComponent(Graphics g) {
		//super.paintComponent(g);
	//	g.drawString(a,10,20);
	//}
	}
	'''
	
	def compileGlobalEvent(EventoGlobal evento)'''
	public static void globalEvent(GameState game){
		«FOR comando:evento.comandos»
		«compileComando(comando)»
		«ENDFOR»
	}
	'''
	
	
	
	
	
	//Gera a classe principal Game
	def compileGame(Game game,IFileSystemAccess2 fsa)'''
import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List; 
import java.util.Random;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsEnvironment;


import javax.imageio.ImageIO;
import javax.swing.*;
public class Game {
	final static int WIDTH = «game.linha»;
	final static int HEIGHT = «game.coluna»;
	final static Random r = new Random();
	«IF game.evento !== null»«compileGlobalEvent(game.evento)»«ENDIF»
	public static BufferedImage readImage(String path) {
		try {
			return ImageIO.read(Game.class.getClassLoader().getResource(path));
		} catch (IOException e) {
			return null;
		}
	}
	public static BufferedImage readImage(String path,int w,int h) {
		try {
			java.awt.Image aux = ImageIO.read(Game.class.getClassLoader().getResource(path));
			aux = aux.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);
			GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
			GraphicsConfiguration config= ge.getDefaultScreenDevice().getDefaultConfiguration();
			BufferedImage img = config.createCompatibleImage(w, h);
			Graphics g = img.getGraphics();
			g.drawImage(aux,0,0,null);
			g.dispose();
			return img;
		} catch (IOException e) {
			return null;
		}
	}
	public static void main(String[] args) {
		GameState game = new GameState();
			«FOR decl:game.declaracoes_globais»
	        «compileDeclaracoes(decl)»
			«ENDFOR»
		«FOR state:game.cenas»
	    «compileState(state,fsa)»
		«ENDFOR»
game.setState(«game.cenas.get(0).name»);
		«FOR state:game.cenas»
	 «compileChoices(state)»
		«ENDFOR»

«compileSwingComponents(game)»

	}
}
«compileAnimatedText()»
	'''
	
	
	
	
	
	//Gera as declarações de variáveis, que são armazenadas num hashMap<String,Object> numa instância da classe GameState
	def compileDeclaracoes(Declaracao decl)'''
	game.addVariable("«decl.name»", «IF decl.string !== null »"«decl.string»"«ELSEIF decl.bool !== null»«decl.bool»«ELSEIF decl.int !=0»«decl.int»«ELSE»0«ENDIF»);'''
	
	
	
	
	
	//Gera as instanciações dos estados que compôem o jogo.
	//Cada estado contém uma string, um array com nomes de variáveis caso a string precise de formatação
	//e uma imagem
	def compileState(Cena cena,IFileSystemAccess2 fsa){
		
		var s = "State "+cena.name+ " = new State("+compileText(cena.textos)+",new ArrayList<String>("
		var aux = ""
		var first = true
		for(t:cena.textos){
			if(t.^var !==null){
				if(first){
					s+="Arrays.asList("
					first = false
				}
				s+= aux	
				s+="\""+t.^var.name+"\""
				aux = ","
			}
		}
		if(!first){
			s+=")"
		}
		s +="),"
		if(cena.imagem !== null){
			s+=compileImage(cena.imagem,"resources/"+cena.name+cena.imagem.caminho.substring(cena.imagem.caminho.lastIndexOf(".")));
		 //	if(!(fsa.isFile(cena.name+".jpg"))){
		 		fsa.generateFile("resources/"+cena.name+cena.imagem.caminho.substring(cena.imagem.caminho.lastIndexOf(".")),new FileInputStream(new File (cena.imagem.caminho)))
		// 	}
		}
		else{
			s+= "null"
		}
		s+=","
		if(cena.sound !== null){
			s+= '''"resources/«cena.name+cena.sound.file_path.substring(cena.sound.file_path.lastIndexOf("."))»"'''
		//	if(!(fsa.isFile(cena.name+".wav"))){
		 		fsa.generateFile("resources/"+cena.name+cena.sound.file_path.substring(cena.sound.file_path.lastIndexOf(".")),new FileInputStream(new File (cena.sound.file_path)))
		 //	}
		}
		else s+= null
		s+= ");"
		return s
	}
	
	
	
	
	
	def compileImage(Imagem imagem,String path)'''
	readImage("«path»"«IF imagem.linha !== 0»,«imagem.linha»,«imagem.coluna»«ENDIF»)
	'''

	
	
	//compila o texto. Caso haje variáveis, não substituidas por seus especificadores de tipo
	def compileText(EList<Texto> text)'''"«FOR t:text»«IF t.^var !==null»«IF t.^var.tipo == "STRING"»%s«ELSEIF t.^var.tipo == "INT"»%d«ELSE»%b"«ENDIF»«ELSE»«t.text»«ENDIF»«ENDFOR»"'''

	//instanciação das escolhas de uma cena
	//Cada instancia pode ter um override dos métodos visible() e getState() caso possua
	//comandos, ifs/elses, ou esteja inclusa num IF ou ELSE de sua cena

	def compileChoices(Cena cena){
		var s = ""
		var visibilityFunction = ""
		for(choice:cena.escolhas){
		if(choice.hasIf){
			
			visibilityFunction = "public boolean visible() {\nif("
		
			
			visibilityFunction += compileExpression(choice.expressaoIf)
			visibilityFunction += "){"
			s += compileIfElseChoices(choice.escolhasIF,visibilityFunction,cena,1,false)
			
			if(choice.hasElse){
			
	
				s+=compileIfElseChoices(choice.escolhasELSE,visibilityFunction,cena,1,true)
				visibilityFunction +="}" 
			}
			
		}
		//Escolha sem condicional de visibilidade		
		else{
			s+= cena.name+".addChoice( new Choice("+compileText(choice.singleChoice.textos)+",new ArrayList<String>("
		var aux = ""
		var first = true
		for(t:choice.singleChoice.textos){
			if(t.^var !==null){
				if(first){
					s+="Arrays.asList("
					first = false
				}
				s+= aux	
				s+="\""+t.^var.name+"\""
				aux = ","
			}
		}
		if(!first){
			s+=")"
		}
		s+="),new ArrayList<State>(Arrays.asList("
		if(choice.singleChoice.^if === null){
			s+= choice.singleChoice.id.name
		}
		s+="))){"+
		compileChoiceCommand(choice.singleChoice)+"}\n);"
		}
		}
		return s
}




    //No caso de IF/ELSE, é preciso contruir a função visible() em chamadas recursidas de compileIfElseChoices
	//A instanciação em si só é gerada no caso base
	def String compileIfElseChoices(EList<Escolhas> escolhas,String v,Cena cena,int i,boolean isElse){
		var visibilityFunction = v
		var s = ""
		for(choice:escolhas){
			if(choice.hasIf){
				visibilityFunction += "\nif("
				visibilityFunction += compileExpression(choice.expressaoIf)
			visibilityFunction += "){"
			s += compileIfElseChoices(choice.escolhasIF,visibilityFunction,cena,i+1,false)
			//visibilityFunction += "}"
		    if(choice.hasElse){
				//visibilityFunction += "else{\n" 
				s+=compileIfElseChoices(choice.escolhasELSE,visibilityFunction,cena,i+1,true)
				//visibilityFunction +="}" 
			}
			
			}
			//caso base
			else{
			    visibilityFunction = v
				s +=cena.name+".addChoice( new Choice( "+compileText(choice.singleChoice.textos)+",new ArrayList<String>("
		var aux = ""
		var first = true
		for(t:choice.singleChoice.textos){
			if(t.^var !==null){
				if(first){
					s+="Arrays.asList("
					first = false
				}
				s+= aux	
				s+="\""+t.^var.name+"\""
				aux = ","
			}
		}
		if(!first){
			s+=")"
		}
		s+="),new ArrayList<State>(Arrays.asList("
		if(choice.singleChoice.^if === null){
			s+=choice.singleChoice.id.name
		}
		s+="))){\n"+ visibilityFunction
		if(!isElse){
			s+="return true;}\n else{return false;}}\n"
		}
		else{
			s+="return false;}\n else{return true;}}\n"
		}
		first = true 
		for(var a=0;a<i-1;a++){
			s+= "else{return false;}"
		
		
			s+="\n}"
		}
		s+= compileChoiceCommand(choice.singleChoice)
		s+= "\n}\n"
		
		s+= ");\n"
			}
		}
		return s
	}
	
	
	
	
	//Gera os comandos de uma escolha (override do método getState)
	def compileChoiceCommand(Escolha choice){
		var s = ""

		//nesse caso não é preciso override de getState()
		if(choice.^if === null && choice.comando.size == 0){return ""}		
		s = "\n public State getState(){"
		if(choice.comando.size != 0){
			
			for(c:choice.comando){
				s+="\n"
				s+=compileComando(c)
				
			}
		}
		if(choice.^if !== null){
			s+=compileChoiceConditionals(choice.^if)
			s+="\n}"
		}
		else{
			s+= "\n return "+choice.id.name+";\n}\n"
		}
		
		return s
	}
	
	
	
	
	//Geração de comandos	
	def dispatch compileComando(Random random){
		var s = '''game.addVariable("«random.id.name»",'''
		var aux = ""
		s+= '''List.of('''
		if(random.possibilidadesBool.size!= 0){
			
			for(b:random.possibilidadesBool){
				s += '''«aux»«b»'''
				aux = ","
			}
			s+= ''').get(r.nextInt(«random.possibilidadesBool.size»))'''
		}
		if(random.possibilidadesString.size!= 0){
			for(st:random.possibilidadesString){
				s += '''«aux»"«st»"'''
				aux = ","
			}
			s+= ''').get(r.nextInt(«random.possibilidadesString.size»))'''
		}
		if(random.possibilidadesInt.size!= 0){
			for(i:random.possibilidadesInt){
				s += '''«aux»«i»'''
				aux = ","
			}
			s+= ''').get(r.nextInt(«random.possibilidadesInt.size»))'''
		}
		s += ");"
		return s;
	}
	
	
	
	
	def dispatch compileComando(Atribuicao atribuicao)'''
	«IF(atribuicao.string === null)»
	game.addVariable("«atribuicao.id.name»",«compileExpression(atribuicao.expressao)»);
	«ELSE»
	game.addVariable("«atribuicao.id.name»","«atribuicao.string»");
	«ENDIF»
	'''
	
	def	String compileChoiceConditionals(If i){
		var s = "if("+compileExpression(i.expressaoIf)+"){\n"+"return "+i.idIf.name+";\n}\n"
		if(i.elif === null){
			s+= "else{\nreturn "+i.idElse.name+";\n}\n"
		}
		else{
			s+= "else if{"+compileChoiceConditionals(i.elif)+"}"
		}
		return s
	}
	
	//Geração de expressões
	def compileExpression(Expressao exp){
		//primeiro termo
		var s = ""
		 s = compileTermoL(exp.termos.get(0))
		var i = 1
		for(op:exp.ou){
			s+=" "+op+op+" "
			s+= compileTermoL(exp.termos.get(i))
			i++
		}
		return s
	}
	def compileTermoL(TermoLogico termo){
		var s = compileFatorL(termo.fatores.get(0))
		var i = 1
		for(op:termo.e){
			s+=" "+op+op+" "
			s+= compileFatorL(termo.fatores.get(i))
			i++
		}
		return s
	}
	def compileFatorL(FatorLogico fator){
		var s = ""
		if(fator.nao){
			s+= "!"
		}
		 s += compileParcelaL(fator.parcela)
		return s
	}
	def compileParcelaL(Parcela_logica parcela){
		var s = ""
		if(parcela.p !== null){
			s+= parcela.p
		}
		else{
			s+= "("+compileExpressaoRelacional(parcela.exp)+")"
		}
		return s
	}
	def compileExpressaoRelacional(ExpressaoRelacional exp){
		var s = compileExpressaoAritmetica(exp.expressoes.get(0))
		var i = 1
		for(op:exp.op){
			s+=" "+op+" "
			s+= compileExpressaoAritmetica(exp.expressoes.get(i))
			i++
		}
		return s
	}
	def compileExpressaoAritmetica(ExpressaoAritmetica exp){
		var s = compileTermo(exp.termos.get(0))
		var i = 1
		for(op:exp.op){
			s+=" "+op+" "
			s+= compileTermo(exp.termos.get(i))
			i++
		}
		return s
	}
	def compileTermo(Termo termo){
		var s = compileFator(termo.fatores.get(0))
		var i = 1
		for(op:termo.op){
			s+=" "+op+" "
			s+= compileFator(termo.fatores.get(i))
			i++
		}
		return s
	}
	def compileFator(Fator fator){
		var s = compileParcela(fator.parcelas.get(0))
		var i = 1
		for(op:fator.op){
			s+=" "+op+" "
			s+= compileParcela(fator.parcelas.get(i))
			i++
		}
		return s
	}
	def compileParcela(Parcela parcela){
		var s = ""
		if(parcela.sub){
			s+= "-"
		}
		if(parcela.id !== null){
			//como estão armanezadas como Object em game, é preciso fazer o cast das variáveis ao usá-las
			switch parcela.id.tipo{
				case "STRING": s+="(String)"
				case "BOOL": s+= "(boolean)"
				case "INT": s+= "(Integer)"
			}
			s+="game.variables.get(\""+parcela.id.name+"\")"
		}
		else{
			s+=parcela.int
		}
		return s
	}
}


